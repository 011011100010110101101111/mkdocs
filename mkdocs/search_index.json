{
    "docs": [
        {
            "location": "/", 
            "text": "MkDocs\n\uf0c1\n\n\nProject documentation with\nMarkdown.\n\n\n\n\nOverview\n\uf0c1\n\n\nMkDocs is a \nfast\n, \nsimple\n and \ndownright gorgeous\n static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.\n\n\n\n\nMkDocs is currently still in development.\n\n\nWe're progressing quickly, but the documentation still needs filling in, and there are a few rough edges.  The 1.0 release is planned to arrive in the next few months.\n\n\n\n\nHost anywhere.\n\uf0c1\n\n\nBuilds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose.\n\n\nGreat themes available.\n\uf0c1\n\n\nThere's a stack of good looking themes included by default. Choose from bootstrap, readthedocs, or any of the 12 bootswatch themes.\n\n\nPreview your site as you work.\n\uf0c1\n\n\nThe built-in devserver allows you to preview your documentation as you're writing it. It will even auto-reload whenever you save any changes, so all you need to do to see your latest edits is refresh your browser.\n\n\nEasy to customize.\n\uf0c1\n\n\nGet your project documentation looking just the way you want it by customizing the theme.\n\n\n\n\nInstallation\n\uf0c1\n\n\nIn order to install MkDocs you'll need \nPython\n installed on your system, as well as the Python package manager, \npip\n.  You can check if you have these already installed like so:\n\n\n$ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2\n\n\n\nMkDocs supports Python 2.6, 2.7, 3.3 and 3.4.\n\n\nOn Windows we recommend that you install Python and pip with \nChocolatey\n.\n\n\nInstall the \nmkdocs\n package using pip:\n\n\n$ pip install mkdocs\n\n\n\nYou should now have the \nmkdocs\n command installed on your system.  Run \nmkdocs help\n to check that everything worked okay.\n\n\n$ mkdocs help\nmkdocs [help|new|build|serve|gh-deploy] {options}\n\n\n\n\n\nGetting started\n\uf0c1\n\n\nGetting started is super easy.\n\n\n$ mkdocs new my-project\n$ cd my-project\n\n\n\nLet's take a moment to review the initial project that's been created for us.\n\n\n\n\nThere's a single configuration file named \nmkdocs.yml\n, and a folder named \ndocs\n that will contain our documentation source files.  Right now the \ndocs\n folder just contains a single documentation page, named \nindex.md\n.\n\n\nMkDocs comes with a built-in webserver that lets you preview your documentation as you work on it. We start the webserver by making sure we're in the same directory as the \nmkdocs.yml\n config file, and then running the \nmkdocs serve\n command:\n\n\n$ mkdocs serve\nRunning at: http://127.0.0.1:8000/\n\n\n\nOpen up \nhttp://127.0.0.1:8000/\n in your browser, and you'll see the index page being displayed:\n\n\n\n\nThe webserver also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory or theme directory changes.\n\n\nGo ahead and edit the \ndocs/index.md\n file now and save the file. Then simply hit reload in the browser and you'll see your updated documentation.\n\n\nNow's also a good time to edit the configuration file, \nmkdocs.yml\n.  Change the \nsite_name\n setting to something else and save the file.\n\n\n\n\nOnce you hit reload in the browser you'll see your new site name take effect.\n\n\n\n\nAdding pages\n\uf0c1\n\n\nGo ahead and edit the \ndoc/index.md\n document, and change the initial heading to \nMkLorum\n, then reload the site in your browser, and you should see the change take effect immediately.\n\n\nLet's also add a second page to our documentation:\n\n\n$ curl 'jaspervdj.be/lorem-markdownum/markdown.txt' \n docs/about.md\n\n\n\nWe'd like our documentation site to include some navigation headers, so we'll edit the configuration file and add some information about the order and title to use for out headers:\n\n\nsite_name: MkLorum\npages:\n- Home: index.md\n- About: about.md\n\n\n\nRefresh the browser and you'll now see a navigation bar with \nHome\n and \nAbout\n headers.\n\n\nTheming our documentation\n\uf0c1\n\n\nWhile we're here can also change the configuration file to alter how the documentation is displayed.  Let's go ahead and change the theme.  Edit the \nmkdocs.yml\n file to the following:\n\n\nsite_name: MkLorum\npages:\n- Home: index.md\n- About: about.md\ntheme: readthedocs\n\n\n\nRefresh the browser again, and you'll now see the ReadTheDocs theme being used.\n\n\n\n\nBuilding the site\n\uf0c1\n\n\nThat's looking good.  We're ready to deploy the first pass of our \nMkLorum\n documentation now.  Let's build the documentation.\n\n\n$ mkdocs build\n\n\n\nThis will create a new directory, named \nsite\n.  Let's take a look inside the directory:\n\n\n$ ls site\nabout css fonts img index.html js\n\n\n\nNotice that our source documentation has been output as two HTML files named \nindex.html\n and \nabout/index.html\n.  We also have various other media that's been copied into the \nsite\n directory as part of the documentation theme.\n\n\nIf you're using source code control such as \ngit\n you probably don't want to check your documentation builds into the repository.  Add a line containing \nsite/\n to your \n.gitignore\n file.\n\n\n$ echo \"site/\" \n .gitignore\n\n\n\nIf you're using another source code control you'll want to check it's documentation on how to ignore specific directories.\n\n\nAfter some time, files may be removed from the documentation but they will still reside in the \nsite\n directory. To remove those stale files, just run mkdocs with the \n--clean\n switch.\n\n\n$ mkdocs build --clean\n\n\n\nDeploying\n\uf0c1\n\n\nThe documentation site that we've just built only uses static files so you'll be\nable to host it from pretty much anywhere. \nGitHub project pages\n and \nAmazon\nS3\n are good hosting options. Upload the contents of the entire \nsite\n directory\nto wherever you're hosting your website from and you're done. For specific instructions\nfor a number of common hosts, see the \nDeploying your Docs\n page.\n\n\nGetting help\n\uf0c1\n\n\nTo get help with MkDocs, please use the \ndiscussion group\n, \nGitHub issues\n or the MkDocs IRC channel \n#mkdocs\n on freenode.", 
            "title": "Home"
        }, 
        {
            "location": "/#mkdocs", 
            "text": "Project documentation with Markdown.", 
            "title": "MkDocs"
        }, 
        {
            "location": "/#overview", 
            "text": "MkDocs is a  fast ,  simple  and  downright gorgeous  static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.   MkDocs is currently still in development.  We're progressing quickly, but the documentation still needs filling in, and there are a few rough edges.  The 1.0 release is planned to arrive in the next few months.   Host anywhere. \uf0c1  Builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose.  Great themes available. \uf0c1  There's a stack of good looking themes included by default. Choose from bootstrap, readthedocs, or any of the 12 bootswatch themes.  Preview your site as you work. \uf0c1  The built-in devserver allows you to preview your documentation as you're writing it. It will even auto-reload whenever you save any changes, so all you need to do to see your latest edits is refresh your browser.  Easy to customize. \uf0c1  Get your project documentation looking just the way you want it by customizing the theme.", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation", 
            "text": "In order to install MkDocs you'll need  Python  installed on your system, as well as the Python package manager,  pip .  You can check if you have these already installed like so:  $ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2  MkDocs supports Python 2.6, 2.7, 3.3 and 3.4.  On Windows we recommend that you install Python and pip with  Chocolatey .  Install the  mkdocs  package using pip:  $ pip install mkdocs  You should now have the  mkdocs  command installed on your system.  Run  mkdocs help  to check that everything worked okay.  $ mkdocs help\nmkdocs [help|new|build|serve|gh-deploy] {options}", 
            "title": "Installation"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Getting started is super easy.  $ mkdocs new my-project\n$ cd my-project  Let's take a moment to review the initial project that's been created for us.   There's a single configuration file named  mkdocs.yml , and a folder named  docs  that will contain our documentation source files.  Right now the  docs  folder just contains a single documentation page, named  index.md .  MkDocs comes with a built-in webserver that lets you preview your documentation as you work on it. We start the webserver by making sure we're in the same directory as the  mkdocs.yml  config file, and then running the  mkdocs serve  command:  $ mkdocs serve\nRunning at: http://127.0.0.1:8000/  Open up  http://127.0.0.1:8000/  in your browser, and you'll see the index page being displayed:   The webserver also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory or theme directory changes.  Go ahead and edit the  docs/index.md  file now and save the file. Then simply hit reload in the browser and you'll see your updated documentation.  Now's also a good time to edit the configuration file,  mkdocs.yml .  Change the  site_name  setting to something else and save the file.   Once you hit reload in the browser you'll see your new site name take effect.", 
            "title": "Getting started"
        }, 
        {
            "location": "/#adding-pages", 
            "text": "Go ahead and edit the  doc/index.md  document, and change the initial heading to  MkLorum , then reload the site in your browser, and you should see the change take effect immediately.  Let's also add a second page to our documentation:  $ curl 'jaspervdj.be/lorem-markdownum/markdown.txt'   docs/about.md  We'd like our documentation site to include some navigation headers, so we'll edit the configuration file and add some information about the order and title to use for out headers:  site_name: MkLorum\npages:\n- Home: index.md\n- About: about.md  Refresh the browser and you'll now see a navigation bar with  Home  and  About  headers.", 
            "title": "Adding pages"
        }, 
        {
            "location": "/#theming-our-documentation", 
            "text": "While we're here can also change the configuration file to alter how the documentation is displayed.  Let's go ahead and change the theme.  Edit the  mkdocs.yml  file to the following:  site_name: MkLorum\npages:\n- Home: index.md\n- About: about.md\ntheme: readthedocs  Refresh the browser again, and you'll now see the ReadTheDocs theme being used.", 
            "title": "Theming our documentation"
        }, 
        {
            "location": "/#building-the-site", 
            "text": "That's looking good.  We're ready to deploy the first pass of our  MkLorum  documentation now.  Let's build the documentation.  $ mkdocs build  This will create a new directory, named  site .  Let's take a look inside the directory:  $ ls site\nabout css fonts img index.html js  Notice that our source documentation has been output as two HTML files named  index.html  and  about/index.html .  We also have various other media that's been copied into the  site  directory as part of the documentation theme.  If you're using source code control such as  git  you probably don't want to check your documentation builds into the repository.  Add a line containing  site/  to your  .gitignore  file.  $ echo \"site/\"   .gitignore  If you're using another source code control you'll want to check it's documentation on how to ignore specific directories.  After some time, files may be removed from the documentation but they will still reside in the  site  directory. To remove those stale files, just run mkdocs with the  --clean  switch.  $ mkdocs build --clean", 
            "title": "Building the site"
        }, 
        {
            "location": "/#deploying", 
            "text": "The documentation site that we've just built only uses static files so you'll be\nable to host it from pretty much anywhere.  GitHub project pages  and  Amazon\nS3  are good hosting options. Upload the contents of the entire  site  directory\nto wherever you're hosting your website from and you're done. For specific instructions\nfor a number of common hosts, see the  Deploying your Docs  page.", 
            "title": "Deploying"
        }, 
        {
            "location": "/#getting-help", 
            "text": "To get help with MkDocs, please use the  discussion group ,  GitHub issues  or the MkDocs IRC channel  #mkdocs  on freenode.", 
            "title": "Getting help"
        }, 
        {
            "location": "/user-guide/configuration/", 
            "text": "Configuration\n\uf0c1\n\n\nGuide to all available configuration settings.\n\n\n\n\nIntroduction\n\uf0c1\n\n\nProject settings are always configured by using a YAML configuration file in the project directory named \nmkdocs.yml\n.\n\n\nAs a minimum this configuration file must contain the \nsite_name\n setting.  All other settings are optional.\n\n\nProject information\n\uf0c1\n\n\nsite_name\n\uf0c1\n\n\nThis is a \nrequired setting\n, and should be a string that is used as the main title for the project documentation.  For example:\n\n\nsite_name: Marshmallow Generator\n\n\n\nWhen rendering the theme this setting will be passed as the \nsite_name\n context variable.\n\n\nsite_url\n\uf0c1\n\n\nSet the canonical URL of the site. This will add a link tag with the canonical URL to the generated HTML header.\n\n\ndefault\n: \nnull\n\n\nrepo_url\n\uf0c1\n\n\nWhen set, provides a link to your GitHub or Bitbucket repository on each page.\n\n\nrepo_url: https://github.com/example/repository/\n\n\n\ndefault\n: \nnull\n\n\nrepo_name\n\uf0c1\n\n\nWhen set, provides a link to your GitHub or Bitbucket repository on each page.\n\n\ndefault\n: \n'GitHub'\n or \n'Bitbucket'\n if the \nrepo_url\n matches those domains, otherwise \nnull\n\n\nsite_description\n\uf0c1\n\n\nSet the site description. This will add a meta tag to the generated HTML header.\n\ndefault\n: \nnull\n\n\nsite_author\n\uf0c1\n\n\nSet the name of the author. This will add a meta tag to the generated HTML header.\n\n\ndefault\n: \nnull\n\n\nsite_favicon\n\uf0c1\n\n\nSet the favicon to use. Putting a \nfavicon.ico\n into the \ndocs/\n directory, the config would look as follows:\n\n\nsite_favicon: favicon.ico\n\n\n\n\ndefault\n: \nnull\n\n\ncopyright\n\uf0c1\n\n\nSet the copyright information to be included in the documentation by the theme.\n\n\ndefault\n: \nnull\n\n\ngoogle_analytics\n\uf0c1\n\n\nSet the Google analytics tracking configuration.\n\n\ngoogle_analytics: ['UA-36723568-3', 'mkdocs.org']\n\n\n\n\ndefault\n: \nnull\n\n\nremote_branch\n\uf0c1\n\n\nSet the remote branch to commit to when using \ngh-deploy\n to update Github Pages. This option can be overriden by a commandline option in \ngh-deploy\n.\n\n\ndefault\n: \ngh-pages\n\n\nDocumentation layout\n\uf0c1\n\n\npages\n\uf0c1\n\n\nThis is setting is used to determine the set of pages that should be built for the documentation.\n\n\nThe setting should be a list.  Each row in the list represents information about a single page as a list of strings.  The first string represents the path of the documentation source file, and should be relative to the \ndocs_dir\n setting.  Remaining strings represent the title of the page in the site navigation.\n\n\nHere's a simple example that would cause the build stage to create three pages:\n\n\npages:\n- 'Introduction': 'index.md'\n- 'User Guide': 'user-guide.md'\n- 'Abut': 'about.md'\n\n\n\nAssuming the \ndocs_dir\n setting was left with the default value of \ndocs\n, the source files for this site's build process would be \ndocs/index.md\n, \ndocs/user-guide.md\n and \ndocs/about.md\n.\n\n\nIf you have a lot of project documentation you might choose to use headings to break up your site navigation by category.  You can do so by including an extra string in the page configuration for any pages that require a navigation heading, like so:\n\n\npages:\n- Introduction: 'index.md'\n- User Guide:\n    - 'Creating a new Marshmallow project': 'user-guide/creating.md'\n    - 'Marshmallow API guide': 'user-guide/api.md'\n    - 'Configuring Marshmallow': 'user-guide/configuration.md'\n- About:\n    - License: 'about/license.md'\n\n\n\nSee also the section on \nconfiguring pages and navigation\n for a more detailed breakdown.\n\n\nBuild directories\n\uf0c1\n\n\ntheme\n\uf0c1\n\n\nSets the theme of your documentation site, for a list of available themes visit\n\nstyling your docs\n.\n\n\ndefault\n: \n'mkdocs'\n\n\ntheme_dir\n\uf0c1\n\n\nLets you set a directory to a custom theme.  This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path.\n\n\nSee \nstyling your docs\n for an explanation of custom themes.\n\n\ndefault\n: \nnull\n\n\ndocs_dir\n\uf0c1\n\n\nLets you set the directory containing the documentation source markdown files.  This can either be a relative directory, in which case it is resolved relative to the directory containing you configuration file, or it can be an absolute directory path.\n\n\ndefault\n: \n'docs'\n\n\nsite_dir\n\uf0c1\n\n\nLets you set the directory where the output HTML and other files are created.  This can either be a relative directory, in which case it is resolved relative to the directory containing you configuration file, or it can be an absolute directory path.\n\n\ndefault\n: \n'site'\n\n\n\n\nNote:\n\n\nIf you are using source code control you will normally want to ensure\nthat your \nbuild output\n files are not committed into the repository, and only\nkeep the \nsource\n files under version control. For example, if using \ngit\n you\nmight add the following line to your \n.gitignore\n file:\n\n\nsite/\n\n\n\nIf you're using another source code control you'll want to check its\ndocumentation on how to ignore specific directories.\n\n\n\n\nextra_css\n\uf0c1\n\n\nSet a list of CSS files to be included by the theme.\n\n\ndefault\n: By default \nextra_css\n will contain a list of all the CSS files found within the \ndocs_dir\n, if none are found it will be \n[]\n (an empty list).\n\n\nextra_javascript\n\uf0c1\n\n\nSet a list of JavaScript files to be included by the theme.\n\n\ndefault\n: By default \nextra_javascript\n will contain a list of all the JavaScript files found within the \ndocs_dir\n, if none are found it will be \n[]\n (an empty list).\n\n\nextra\n\uf0c1\n\n\nA set of key value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes.\n\n\ndefault\n: By default \nextra\n will be an empty key value mapping.\n\n\nPreview controls\n\uf0c1\n\n\nuse_directory_urls\n\uf0c1\n\n\nThis setting controls the style used for linking to pages within the documentation.\n\n\nThe following table demonstrates how the URLs used on the site differ when setting \nuse_directory_urls\n to \ntrue\n or \nfalse\n.\n\n\n\n\n\n\n\n\nSource file\n\n\nGenerated HTML\n\n\nuse_directory_urls=true\n\n\nuse_directory_urls=false\n\n\n\n\n\n\n\n\n\n\nindex.md\n\n\nindex.html\n\n\n/\n\n\n/index.html\n\n\n\n\n\n\napi-guide.md\n\n\napi-guide/index.html\n\n\n/api-guide/\n\n\n/api-guide/index.html\n\n\n\n\n\n\nabout.md\n\n\nabout/index.html\n\n\n/about/\n\n\n/about/index.html\n\n\n\n\n\n\n\n\nThe default style of \nuse_directory_urls=true\n creates more user friendly URLs, and is usually what you'll want to use.\n\n\nThe alternate style can occasionally be useful if you want your documentation to remain properly linked when opening pages directly from the file system, because it create links that point directly to the target \nfile\n rather than the target \ndirectory\n.\n\n\ndefault\n: \ntrue\n\n\nstrict\n\uf0c1\n\n\nDetermines if a broken link to a page within the documentation is considered a warning or an error (link to a page not listed in the pages setting).  Set to true to halt processing when a broken link is found, false prints a warning.\n\n\ndefault\n: \nfalse\n\n\ndev_addr\n\uf0c1\n\n\nDetermines the address used when running \nmkdocs serve\n.  Setting this allows you to use another port, or allows you to make the service accessible over your local network by using the \n0.0.0.0\n address.\n\n\nAs with all settings, you can set this from the command line, which can be useful, for example:\n\n\nmkdocs serve --dev-addr=0.0.0.0:80  # Run on port 80, accessible over the local network.\n\n\n\ndefault\n: \n'127.0.0.1:8000'\n\n\nFormatting options\n\uf0c1\n\n\nmarkdown_extensions\n\uf0c1\n\n\nMkDocs uses the \nPython Markdown\n library to translate Markdown files\ninto HTML. Python Markdown supports a variety of \nextensions\n\nthat customize how pages are formatted. This setting lets you enable a list of\nextensions beyond the ones that MkDocs uses by default (\nmeta\n, \ntoc\n, \ntables\n,\nand \nfenced_code\n).\n\n\nFor example, to enable the \nSmartyPants typography extension\n, use:\n\n\nmarkdown_extensions:\n    - smarty\n\n\n\nSome extensions provide configuration options of their own. If you would like to\nset any configuration options, then you can nest a key/value mapping\n(\noption_name: option value\n) of any options that a given extension supports.\nSee the documentation for the extension you are using to determine what options\nthey support.\n\n\nFor example, to enable permalinks in the (included) \ntoc\n extension, use:\n\n\nmarkdown_extensions:\n    - toc:\n        permalink: True\n\n\n\nNote that a colon (\n:\n) must follow the extension name (\ntoc\n) and then on a new line\nthe option name and value must be indented and seperated by a colon. If you would like\nto define multipe options for a single extension, each option must be defined on\na seperate line:\n\n\nmarkdown_extensions:\n    - toc:\n        permalink: True\n        separator: \"_\"\n\n\n\nAdd an additional item to the list for each extension. If you have no\nconfiguration options to set for a specific extension, then simply omit options\nfor that extension:\n\n\nmarkdown_extensions:\n    - smarty\n    - toc:\n        permalink: True\n    - sane_lists\n\n\n\n\n\nSee Also:\n\n\nThe Python-Markdown documentation provides a \nlist of extensions\n\nwhich are available out-of-the-box. For a list of configuration options\navailable for a given extension, see the documentation for that extension.\n\n\nYou may also install and use various \nthird party extensions\n. Consult the\ndocumentation provided by those extensions for installation instructions and\navailable configuration options.\n\n\n\n\ndefault\n: \n[]", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/configuration/#configuration", 
            "text": "Guide to all available configuration settings.", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/configuration/#introduction", 
            "text": "Project settings are always configured by using a YAML configuration file in the project directory named  mkdocs.yml .  As a minimum this configuration file must contain the  site_name  setting.  All other settings are optional.", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-guide/configuration/#project-information", 
            "text": "site_name \uf0c1  This is a  required setting , and should be a string that is used as the main title for the project documentation.  For example:  site_name: Marshmallow Generator  When rendering the theme this setting will be passed as the  site_name  context variable.  site_url \uf0c1  Set the canonical URL of the site. This will add a link tag with the canonical URL to the generated HTML header.  default :  null  repo_url \uf0c1  When set, provides a link to your GitHub or Bitbucket repository on each page.  repo_url: https://github.com/example/repository/  default :  null  repo_name \uf0c1  When set, provides a link to your GitHub or Bitbucket repository on each page.  default :  'GitHub'  or  'Bitbucket'  if the  repo_url  matches those domains, otherwise  null  site_description \uf0c1  Set the site description. This will add a meta tag to the generated HTML header. default :  null  site_author \uf0c1  Set the name of the author. This will add a meta tag to the generated HTML header.  default :  null  site_favicon \uf0c1  Set the favicon to use. Putting a  favicon.ico  into the  docs/  directory, the config would look as follows:  site_favicon: favicon.ico  default :  null  copyright \uf0c1  Set the copyright information to be included in the documentation by the theme.  default :  null  google_analytics \uf0c1  Set the Google analytics tracking configuration.  google_analytics: ['UA-36723568-3', 'mkdocs.org']  default :  null  remote_branch \uf0c1  Set the remote branch to commit to when using  gh-deploy  to update Github Pages. This option can be overriden by a commandline option in  gh-deploy .  default :  gh-pages", 
            "title": "Project information"
        }, 
        {
            "location": "/user-guide/configuration/#documentation-layout", 
            "text": "pages \uf0c1  This is setting is used to determine the set of pages that should be built for the documentation.  The setting should be a list.  Each row in the list represents information about a single page as a list of strings.  The first string represents the path of the documentation source file, and should be relative to the  docs_dir  setting.  Remaining strings represent the title of the page in the site navigation.  Here's a simple example that would cause the build stage to create three pages:  pages:\n- 'Introduction': 'index.md'\n- 'User Guide': 'user-guide.md'\n- 'Abut': 'about.md'  Assuming the  docs_dir  setting was left with the default value of  docs , the source files for this site's build process would be  docs/index.md ,  docs/user-guide.md  and  docs/about.md .  If you have a lot of project documentation you might choose to use headings to break up your site navigation by category.  You can do so by including an extra string in the page configuration for any pages that require a navigation heading, like so:  pages:\n- Introduction: 'index.md'\n- User Guide:\n    - 'Creating a new Marshmallow project': 'user-guide/creating.md'\n    - 'Marshmallow API guide': 'user-guide/api.md'\n    - 'Configuring Marshmallow': 'user-guide/configuration.md'\n- About:\n    - License: 'about/license.md'  See also the section on  configuring pages and navigation  for a more detailed breakdown.", 
            "title": "Documentation layout"
        }, 
        {
            "location": "/user-guide/configuration/#build-directories", 
            "text": "theme \uf0c1  Sets the theme of your documentation site, for a list of available themes visit styling your docs .  default :  'mkdocs'  theme_dir \uf0c1  Lets you set a directory to a custom theme.  This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path.  See  styling your docs  for an explanation of custom themes.  default :  null  docs_dir \uf0c1  Lets you set the directory containing the documentation source markdown files.  This can either be a relative directory, in which case it is resolved relative to the directory containing you configuration file, or it can be an absolute directory path.  default :  'docs'  site_dir \uf0c1  Lets you set the directory where the output HTML and other files are created.  This can either be a relative directory, in which case it is resolved relative to the directory containing you configuration file, or it can be an absolute directory path.  default :  'site'   Note:  If you are using source code control you will normally want to ensure\nthat your  build output  files are not committed into the repository, and only\nkeep the  source  files under version control. For example, if using  git  you\nmight add the following line to your  .gitignore  file:  site/  If you're using another source code control you'll want to check its\ndocumentation on how to ignore specific directories.   extra_css \uf0c1  Set a list of CSS files to be included by the theme.  default : By default  extra_css  will contain a list of all the CSS files found within the  docs_dir , if none are found it will be  []  (an empty list).  extra_javascript \uf0c1  Set a list of JavaScript files to be included by the theme.  default : By default  extra_javascript  will contain a list of all the JavaScript files found within the  docs_dir , if none are found it will be  []  (an empty list).  extra \uf0c1  A set of key value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes.  default : By default  extra  will be an empty key value mapping.", 
            "title": "Build directories"
        }, 
        {
            "location": "/user-guide/configuration/#preview-controls", 
            "text": "use_directory_urls \uf0c1  This setting controls the style used for linking to pages within the documentation.  The following table demonstrates how the URLs used on the site differ when setting  use_directory_urls  to  true  or  false .     Source file  Generated HTML  use_directory_urls=true  use_directory_urls=false      index.md  index.html  /  /index.html    api-guide.md  api-guide/index.html  /api-guide/  /api-guide/index.html    about.md  about/index.html  /about/  /about/index.html     The default style of  use_directory_urls=true  creates more user friendly URLs, and is usually what you'll want to use.  The alternate style can occasionally be useful if you want your documentation to remain properly linked when opening pages directly from the file system, because it create links that point directly to the target  file  rather than the target  directory .  default :  true  strict \uf0c1  Determines if a broken link to a page within the documentation is considered a warning or an error (link to a page not listed in the pages setting).  Set to true to halt processing when a broken link is found, false prints a warning.  default :  false  dev_addr \uf0c1  Determines the address used when running  mkdocs serve .  Setting this allows you to use another port, or allows you to make the service accessible over your local network by using the  0.0.0.0  address.  As with all settings, you can set this from the command line, which can be useful, for example:  mkdocs serve --dev-addr=0.0.0.0:80  # Run on port 80, accessible over the local network.  default :  '127.0.0.1:8000'", 
            "title": "Preview controls"
        }, 
        {
            "location": "/user-guide/configuration/#formatting-options", 
            "text": "markdown_extensions \uf0c1  MkDocs uses the  Python Markdown  library to translate Markdown files\ninto HTML. Python Markdown supports a variety of  extensions \nthat customize how pages are formatted. This setting lets you enable a list of\nextensions beyond the ones that MkDocs uses by default ( meta ,  toc ,  tables ,\nand  fenced_code ).  For example, to enable the  SmartyPants typography extension , use:  markdown_extensions:\n    - smarty  Some extensions provide configuration options of their own. If you would like to\nset any configuration options, then you can nest a key/value mapping\n( option_name: option value ) of any options that a given extension supports.\nSee the documentation for the extension you are using to determine what options\nthey support.  For example, to enable permalinks in the (included)  toc  extension, use:  markdown_extensions:\n    - toc:\n        permalink: True  Note that a colon ( : ) must follow the extension name ( toc ) and then on a new line\nthe option name and value must be indented and seperated by a colon. If you would like\nto define multipe options for a single extension, each option must be defined on\na seperate line:  markdown_extensions:\n    - toc:\n        permalink: True\n        separator: \"_\"  Add an additional item to the list for each extension. If you have no\nconfiguration options to set for a specific extension, then simply omit options\nfor that extension:  markdown_extensions:\n    - smarty\n    - toc:\n        permalink: True\n    - sane_lists   See Also:  The Python-Markdown documentation provides a  list of extensions \nwhich are available out-of-the-box. For a list of configuration options\navailable for a given extension, see the documentation for that extension.  You may also install and use various  third party extensions . Consult the\ndocumentation provided by those extensions for installation instructions and\navailable configuration options.   default :  []", 
            "title": "Formatting options"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/", 
            "text": "Deploying your docs\n\uf0c1\n\n\nA basic guide to deploying your docs to various hosting providers\n\n\n\n\nGitHub Pages\n\uf0c1\n\n\nIf you host the source code for a project on \nGitHub\n, you can easily use\n\nGitHub Pages\n to host the documentation for your project. After you \ncheckout\n\nthe primary working branch (usually \nmaster\n) of the git repository where you\nmaintain the source documentation for your project, run the following command:\n\n\nmkdocs gh-deploy --clean\n\n\n\n\nThat's it! Behind the scenes, MkDocs will build your docs and use the \nghp-import\n\ntool to commit them to the gh-pages branch and push the gh-pages branch to\nGitHub.\n\n\nUse \nmkdocs gh-deploy --help\n to get a full list of options available for the\n\ngh-deploy\n command.\n\n\nBe aware that you will not be able to review the built site before it is pushed\nto GitHub. Therefore, you may want to verify any changes you make to the docs\nbeforehand by using the \nbuild\n or \nserve\n commands and reviewing the built\nfiles locally.\n\n\n\n\nWarning\n\n\nYou should never edit files in your gh-pages branch by hand if you're using\nthe \ngh-deploy\n command because you will lose your work.\n\n\n\n\nRead the Docs\n\uf0c1\n\n\nRead the Docs\n offers free documentation hosting. You can import your docs\nusing any major version control system, including Mercurial, Git, Subversion,\nand Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the\n\ninstructions\n on their site to arrange the filies in your repository properly,\ncreate an account and point it at your publicly hosted repository. If properly\nconfigured, your documentation will update each time you push commits to your\npublic repository.\n\n\n\n\nNote\n\n\nTo benefit from all of the \nfeatures\n offered by Read the Docs, you will need\nto use the \nRead the Docs theme\n which ships with MkDocs. The various\nthemes which may be referenced in Read the Docs' documentation are Sphinx\nspecific themes and will not work with MkDocs.\n\n\n\n\nPyPI\n\uf0c1\n\n\nIf you maintain a \nPython\n project which is hosted on the \nPython Package\nIndex\n (PyPI), you can use the hosting provided at \npythonhosted.org\n to\nhost documentation for your project. Run the following commands from your\nproject's root directory to upload your documentation:\n\n\nmkdocs build --clean\npython setup.py upload_docs --upload-dir=site  \n\n\n\n\nYou documentation will be hosted at \nhttp://pythonhosted.org/\nprojectname\n/\n\nwhere \nprojectname\n is the name you used to register your project with PyPI.\n\n\nThere are a few prerequisites for the above to work:\n\n\n\n\nYou must be using \nSetuptools\n in your \nsetup.py\n script (\nDistutils\n does not\noffer an \nupload_docs\n command).\n\n\nYour project must already be registered with PyPI (use \npython setup.py register\n).\n\n\nYour \nmkdocs.yml\n config file and your \"docs\" directory (value assigned to\nthe \ndocs_dir\n configuration option) are presumed to be in the root directory of\nyour project alongside your \nsetup.py\n script.\n\n\nIt is assumed that the default value (\n\"site\"\n) is assigned to the \nsite_dir\n\nconfiguration option in your \nmkdocs.yaml\n config file. If you have set a\ndifferent value, assign that value to the \n--upload-dir\n option.\n\n\n\n\nOther Providers\n\uf0c1\n\n\nAny hosting provider which can serve static files can be used to serve\ndocumentation generated by MkDocs. While is would be imposable to document how\nto upload the docs to every hosting provider out there, the following guidelines\nshould provide some general assistance.\n\n\nWhen you build your site (using the \nmkdocs build\n command), all of the files\nare written to the directory assigned to the \nsite_dir\n configuration option\n(defaults to \n\"site\"\n) in your \nmkdocs.yaml\n config file. Generally, you will\nsimply need to copy the connects of that directory to the root directory of your\nhosting provider's server. Depending on your hosting provider's setup, you may\nneed to use a graphical or command line \nftp\n, \nssh\n or \nscp\n client to transfer\nthe files.\n\n\nFor example, a typical set of commands from the command line might look\nsomething like this:\n\n\nmkdocs build --clean\nscp -r ./site usr@host:/path/to/server/root\n\n\n\n\nOf course, you will need to replace \nuser\n with the username you have with your\nhosting provider and \nhost\n with the appropriate domain name. Additionally, you\nwill need to adjust the \n/path/to/server/root\n to match the configuration of\nyour hosts' file system. \n\n\nSee your host's documentation for specifics. You will likely want to search\ntheir documentation for \"ftp\" or \"uploading site\".", 
            "title": "Deploying your docs"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#deploying-your-docs", 
            "text": "A basic guide to deploying your docs to various hosting providers", 
            "title": "Deploying your docs"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#github-pages", 
            "text": "If you host the source code for a project on  GitHub , you can easily use GitHub Pages  to host the documentation for your project. After you  checkout \nthe primary working branch (usually  master ) of the git repository where you\nmaintain the source documentation for your project, run the following command:  mkdocs gh-deploy --clean  That's it! Behind the scenes, MkDocs will build your docs and use the  ghp-import \ntool to commit them to the gh-pages branch and push the gh-pages branch to\nGitHub.  Use  mkdocs gh-deploy --help  to get a full list of options available for the gh-deploy  command.  Be aware that you will not be able to review the built site before it is pushed\nto GitHub. Therefore, you may want to verify any changes you make to the docs\nbeforehand by using the  build  or  serve  commands and reviewing the built\nfiles locally.   Warning  You should never edit files in your gh-pages branch by hand if you're using\nthe  gh-deploy  command because you will lose your work.", 
            "title": "GitHub Pages"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#read-the-docs", 
            "text": "Read the Docs  offers free documentation hosting. You can import your docs\nusing any major version control system, including Mercurial, Git, Subversion,\nand Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the instructions  on their site to arrange the filies in your repository properly,\ncreate an account and point it at your publicly hosted repository. If properly\nconfigured, your documentation will update each time you push commits to your\npublic repository.   Note  To benefit from all of the  features  offered by Read the Docs, you will need\nto use the  Read the Docs theme  which ships with MkDocs. The various\nthemes which may be referenced in Read the Docs' documentation are Sphinx\nspecific themes and will not work with MkDocs.", 
            "title": "Read the Docs"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#pypi", 
            "text": "If you maintain a  Python  project which is hosted on the  Python Package\nIndex  (PyPI), you can use the hosting provided at  pythonhosted.org  to\nhost documentation for your project. Run the following commands from your\nproject's root directory to upload your documentation:  mkdocs build --clean\npython setup.py upload_docs --upload-dir=site    You documentation will be hosted at  http://pythonhosted.org/ projectname / \nwhere  projectname  is the name you used to register your project with PyPI.  There are a few prerequisites for the above to work:   You must be using  Setuptools  in your  setup.py  script ( Distutils  does not\noffer an  upload_docs  command).  Your project must already be registered with PyPI (use  python setup.py register ).  Your  mkdocs.yml  config file and your \"docs\" directory (value assigned to\nthe  docs_dir  configuration option) are presumed to be in the root directory of\nyour project alongside your  setup.py  script.  It is assumed that the default value ( \"site\" ) is assigned to the  site_dir \nconfiguration option in your  mkdocs.yaml  config file. If you have set a\ndifferent value, assign that value to the  --upload-dir  option.", 
            "title": "PyPI"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#other-providers", 
            "text": "Any hosting provider which can serve static files can be used to serve\ndocumentation generated by MkDocs. While is would be imposable to document how\nto upload the docs to every hosting provider out there, the following guidelines\nshould provide some general assistance.  When you build your site (using the  mkdocs build  command), all of the files\nare written to the directory assigned to the  site_dir  configuration option\n(defaults to  \"site\" ) in your  mkdocs.yaml  config file. Generally, you will\nsimply need to copy the connects of that directory to the root directory of your\nhosting provider's server. Depending on your hosting provider's setup, you may\nneed to use a graphical or command line  ftp ,  ssh  or  scp  client to transfer\nthe files.  For example, a typical set of commands from the command line might look\nsomething like this:  mkdocs build --clean\nscp -r ./site usr@host:/path/to/server/root  Of course, you will need to replace  user  with the username you have with your\nhosting provider and  host  with the appropriate domain name. Additionally, you\nwill need to adjust the  /path/to/server/root  to match the configuration of\nyour hosts' file system.   See your host's documentation for specifics. You will likely want to search\ntheir documentation for \"ftp\" or \"uploading site\".", 
            "title": "Other Providers"
        }, 
        {
            "location": "/user-guide/styling-your-docs/", 
            "text": "Styling your docs\n\uf0c1\n\n\nHow to style and theme your documentation.\n\n\n\n\nMkDocs includes a number of \ndifferent themes\n which can easily be customised with extra CSS or JavaScript or you can create a \ncustom theme\n for your documentation.\n\n\nTo use a theme that is included in MkDocs, simply add this to your \nmkdocs.yml\n config file.\n\n\ntheme: amelia\n\n\n\nReplace \namelia\n with any of the \nbuiltin themes\n listed below.\n\n\nTo customise a theme, simply place additional CSS and JavaScript files in the documentation directory next to the Markdown files and these will be automatically detected and added. Additionally, the \nextra_css\n and \nextra_javascript\n configuration options can be used to specifically include certain CSS or JavaScript files.\n\n\nSee the \nconfiguration documentation\n for more specific details about these options.\n\n\nTo create a new custom theme or more heavily customise an existing theme, see the \ncustom themes\n section below.\n\n\nBuilt-in themes\n\uf0c1\n\n\nMkDocs\n\uf0c1\n\n\n\n\nRead the Docs\n\uf0c1\n\n\n\n\nBootstrap\n\uf0c1\n\n\n\n\nThe bootswatch themes\n\uf0c1\n\n\nAmelia\n\uf0c1\n\n\n\n\nCerulean\n\uf0c1\n\n\n\n\nCosmo\n\uf0c1\n\n\n\n\nCyborg\n\uf0c1\n\n\n\n\nFlatly\n\uf0c1\n\n\n\n\nJournal\n\uf0c1\n\n\n\n\nReadable\n\uf0c1\n\n\n\n\nSimplex\n\uf0c1\n\n\n\n\nSlate\n\uf0c1\n\n\n\n\nSpacelab\n\uf0c1\n\n\n\n\nUnited\n\uf0c1\n\n\n\n\nYeti\n\uf0c1\n\n\n\n\nCustom themes\n\uf0c1\n\n\nThe bare minimum required for a custom theme is a \nbase.html\n \nJinja2 template\n file. This should be placed in a directory at the same level as the \nmkdocs.yml\n configuration file. Within \nmkdocs.yml\n, specify the \ntheme_dir\n option and set it to the name of the directory containing \nbase.html\n. For example, given this example project layout:\n\n\nmkdocs.yml\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...\n\n\n\nYou would include the following setting to use the custom theme directory:\n\n\ntheme_dir: 'custom_theme'\n\n\n\nIf used in combination with the \ntheme\n configuration value a custom theme can be used to replace only specific parts of a built-in theme. For example, with the above layout and if you set \ntheme: mkdocs\n then the \nbase.html\n file would replace that in the theme but otherwise it would remain the same. This is useful if you want to make small adjustments to an existing theme.\n\n\nBasic theme\n\uf0c1\n\n\nThe simplest \nbase.html\n file is the following:\n\n\n!DOCTYPE html\n\n\nhtml\n\n  \nhead\n\n  \n/head\n\n  \nbody\n\n    {{ content }}\n  \n/body\n\n\n/html\n\n\n\n\nArticle content from each page specified in \nmkdocs.yml\n is inserted using the \n{{ content }}\n tag. Stylesheets and scripts can be brought into this theme as with a normal HTML file. Navbars and tables of contents can also be generated and included automatically, through the \nnav\n and \ntoc\n objects, respectively. If you wish to write your own theme, it is recommended to start with one of the \nbuilt-in themes\n and modify it accordingly.\n\n\nTemplate Variables\n\uf0c1\n\n\nEach template in a theme is built with a template context. These are the variables that are available to themes. The context varies depending on the template that is being built. At the moment templates are either built with the global context or with a page specific context. The global context is used for HTML pages that don't represent an individual Markdown document, for example a 404.html page or search.html.\n\n\nGlobal Context\n\uf0c1\n\n\nThe following variables in the context map directly the the \nconfiguration options\n.\n\n\n\n\n\n\n\n\nVariable Name\n\n\nConfiguration name\n\n\n\n\n\n\n\n\n\n\n\n\nsite_name\n\n\nsite_name\n\n\n\n\n\n\n\n\nsite_author\n\n\nsite_author\n\n\n\n\n\n\n\n\nfavicon\n\n\nsite_favicon\n\n\n\n\n\n\n\n\npage_description\n\n\nsite_description\n\n\n\n\n\n\n\n\nrepo_url\n\n\nrepo_url\n\n\n\n\n\n\n\n\nrepo_name\n\n\nrepo_name\n\n\n\n\n\n\n\n\nsite_url\n\n\nsite_url\n\n\n\n\n\n\n\n\nextra_css\n\n\nextra_css\n\n\n\n\n\n\n\n\nextra_javascript\n\n\nextra_javascript\n\n\n\n\n\n\n\n\nextra\n\n\nextra\n\n\n\n\n\n\n\n\ninclude_nav\n\n\ninclude_nav\n\n\n\n\n\n\n\n\ninclude_next_prev\n\n\ninclude_next_prev\n\n\n\n\n\n\n\n\ncopyright\n\n\ncopyright\n\n\n\n\n\n\n\n\ngoogle_analytics\n\n\ngoogle_analytics\n\n\n\n\n\n\n\n\n\n\nThe following variables provide information about the navigation and location.\n\n\nnav\n\uf0c1\n\n\nThe \nnav\n variable is used to create the navigation for for the documentation. Following is a basic usage example which outputs the first and second level navigation as a nested list.\n\n\nul\n\n  {% for nav_item in nav %}\n      {% if nav_item.children %}\n          \nli\n{{ nav_item.title }}\n              \nul\n\n              {% for nav_item in nav_item.children %}\n                  \nli class=\n{% if nav_item.active%}current{%endif%}\n\n                      \na href=\n{{ nav_item.url }}\n{{ nav_item.title }}\n/a\n\n                  \n/li\n\n              {% endfor %}\n              \n/ul\n\n          \n/li\n\n      {% else %}\n          \nli class=\n{% if nav_item.active%}current{%endif%}\n\n              \na href=\n{{ nav_item.url }}\n{{ nav_item.title }}\n/a\n\n          \n/li\n\n      {% endif %}\n\n  {% endfor %}\n\n/ul\n\n\n\n\n\nbase_url\n\uf0c1\n\n\nThe \nbase_url\n provides a relative path to the root of the MkDocs project. This makes it easy to include links to static assets in your theme. For example, if your theme includes a \njs\n folder, to include \ntheme.js\n from that folder on all pages you would do this:\n\n\nscript src=\n{{ base_url }}/js/theme.js\n/script\n\n\n\n\n\nhomepage_url\n\uf0c1\n\n\nProvides a relative path to the documentation homepage.\n\n\nmkdocs_version\n\uf0c1\n\n\nContains the current MkDocs version.\n\n\nbuild_date_utc\n\uf0c1\n\n\nA Python datetime object that includes represents the time the documentation was built in UTC. This is useful for showing how recently the documentation was updated.\n\n\nPage Context\n\uf0c1\n\n\nThe page context includes all of the above Global context and the following additional variables.\n\n\npage_title\n\uf0c1\n\n\nContains the Title for the current page.\n\n\npage_description\n\uf0c1\n\n\nContains the description for the current page on the homepage, it is blank on other pages.\n\n\ncontent\n\uf0c1\n\n\nThe rendered Markdown as HTML, this is the contents of the documentation.\n\n\ntoc\n\uf0c1\n\n\nAn object representing the Table of contents for a page. Displaying the table of contents as a simple list can be achieved like this.\n\n\n  \nul\n\n  {% for toc_item in toc %}\n      \nli\na href=\n{{ toc_item.url }}\n{{ toc_item.title }}\n/a\n/li\n\n      {% for toc_item in toc_item.children %}\n          \nli\na href=\n{{ toc_item.url }}\n{{ toc_item.title }}\n/a\n/li\n\n      {% endfor %}\n  {% endfor %}\n  \n/ul\n\n\n\n\n\nmeta\n\uf0c1\n\n\nA mapping of the metadata included at the top of the markdown page.\n\n\ncanonical_url\n\uf0c1\n\n\nThe full, canonical URL to the current page. This includes the site_url from the configuration.\n\n\ncurrent_page\n\uf0c1\n\n\nThe page object for the current page. The page path and url properties can be displayed like this.\n\n\nh1\n{{ current_page.title }}\n/h1\n\n\np\n This page is at {{ current_page.url }}\n/p\n\n\n\n\n\nprevious_page\n\uf0c1\n\n\nThe page object for the previous  page. The isage is the same as for\n\ncurrent_page\n.\n\n\nnext_page\n\uf0c1\n\n\nThe page object for the next page.The isage is the same as for \ncurrent_page\n.\n\n\nExtra Context\n\uf0c1\n\n\nAdditional variables can be passed to the template with the \nextra\n configuration option. This is a set of key value pairs that can make custom templates far more flexible.\n\n\nFor example, this could be used to include the project version of all pages and a list of links related to the project. This can be achieved with the following \nextra\n configuration:\n\n\nextra:\n    version: 0.13.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/\n\n\n\n\nAnd then displayed with this HTML in the custom theme.\n\n\n{{ config.extra.version }}\n\n{% if config.extra.links %}\n  \nul\n\n  {% for link in config.extra.links %}\n      \nli\n{{ link }}\n/li\n\n  {% endfor %}\n  \n/ul\n\n{% endif %}\n\n\n\n\nSearch and themes\n\uf0c1\n\n\nAs of MkDocs \n0.13\n client side search support has been added to MkDocs with \nLunr.js\n.\n\n\nSearch can either be added to every page in the theme or to a dedicated template which must be named \nsearch.html\n. The search template will be build with the same name and can be viewable with \nmkdocs serve\n at \nhttp://localhost:8000/search.html\n. An example of the two different approaches can be seen by comparing the \nmkdocs\n and \nreadthedocs\n themes.\n\n\nThe following HTML needs to be added to the theme so the JavaScript is loaded for Lunr.js.\n\n\nscript\nvar base_url = '{{ base_url }}';\n/script\n\n\nscript data-main=\"{{ base_url }}/mkdocs/js/search.js\" src=\"{{ base_url }}/mkdocs/js/require.js\"\n/script\n\n\n\n\n\n\nNote\n\n\nThe above JavaScript will download the search index, for larger documentation projects this can be a heavy operation. In those cases, it is suggested that you either use the \nsearch.html\n approach to only include search on one page or load the JavaScript on an event like a form submit.\n\n\n\n\nThis loads the JavaScript and sets a global variable \nbase_url\n which allows the JavaScript to make the links relative to the current page. The above JavaScript, with the following HTML in a \nsearch.html\n template will add a full search implementation to your theme.\n\n\nh1 id=\"search\"\nSearch Results\n/h1\n\n\n\nform action=\"search.html\"\n\n  \ninput name=\"q\" id=\"mkdocs-search-query\" type=\"text\" class=\"search_input search-query ui-autocomplete-input\" placeholder=\"Search the Docs\" autocomplete=\"off\"\n\n\n/form\n\n\n\ndiv id=\"mkdocs-search-results\"\n\n  Sorry, page not found.\n\n/div\n\n\n\n\nThis works by looking for the specific ID's used in the above HTML. The input for the user to type the search query must have the ID \nmkdocs-search-query\n and \nmkdocs-search-results\n is the directory where the results will be placed.", 
            "title": "Styling your docs"
        }, 
        {
            "location": "/user-guide/styling-your-docs/#styling-your-docs", 
            "text": "How to style and theme your documentation.   MkDocs includes a number of  different themes  which can easily be customised with extra CSS or JavaScript or you can create a  custom theme  for your documentation.  To use a theme that is included in MkDocs, simply add this to your  mkdocs.yml  config file.  theme: amelia  Replace  amelia  with any of the  builtin themes  listed below.  To customise a theme, simply place additional CSS and JavaScript files in the documentation directory next to the Markdown files and these will be automatically detected and added. Additionally, the  extra_css  and  extra_javascript  configuration options can be used to specifically include certain CSS or JavaScript files.  See the  configuration documentation  for more specific details about these options.  To create a new custom theme or more heavily customise an existing theme, see the  custom themes  section below.", 
            "title": "Styling your docs"
        }, 
        {
            "location": "/user-guide/styling-your-docs/#built-in-themes", 
            "text": "MkDocs \uf0c1   Read the Docs \uf0c1   Bootstrap \uf0c1   The bootswatch themes \uf0c1  Amelia \uf0c1   Cerulean \uf0c1   Cosmo \uf0c1   Cyborg \uf0c1   Flatly \uf0c1   Journal \uf0c1   Readable \uf0c1   Simplex \uf0c1   Slate \uf0c1   Spacelab \uf0c1   United \uf0c1   Yeti \uf0c1", 
            "title": "Built-in themes"
        }, 
        {
            "location": "/user-guide/styling-your-docs/#custom-themes", 
            "text": "The bare minimum required for a custom theme is a  base.html   Jinja2 template  file. This should be placed in a directory at the same level as the  mkdocs.yml  configuration file. Within  mkdocs.yml , specify the  theme_dir  option and set it to the name of the directory containing  base.html . For example, given this example project layout:  mkdocs.yml\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...  You would include the following setting to use the custom theme directory:  theme_dir: 'custom_theme'  If used in combination with the  theme  configuration value a custom theme can be used to replace only specific parts of a built-in theme. For example, with the above layout and if you set  theme: mkdocs  then the  base.html  file would replace that in the theme but otherwise it would remain the same. This is useful if you want to make small adjustments to an existing theme.  Basic theme \uf0c1  The simplest  base.html  file is the following:  !DOCTYPE html  html \n   head \n   /head \n   body \n    {{ content }}\n   /body  /html   Article content from each page specified in  mkdocs.yml  is inserted using the  {{ content }}  tag. Stylesheets and scripts can be brought into this theme as with a normal HTML file. Navbars and tables of contents can also be generated and included automatically, through the  nav  and  toc  objects, respectively. If you wish to write your own theme, it is recommended to start with one of the  built-in themes  and modify it accordingly.  Template Variables \uf0c1  Each template in a theme is built with a template context. These are the variables that are available to themes. The context varies depending on the template that is being built. At the moment templates are either built with the global context or with a page specific context. The global context is used for HTML pages that don't represent an individual Markdown document, for example a 404.html page or search.html.  Global Context \uf0c1  The following variables in the context map directly the the  configuration options .     Variable Name  Configuration name       site_name  site_name     site_author  site_author     favicon  site_favicon     page_description  site_description     repo_url  repo_url     repo_name  repo_name     site_url  site_url     extra_css  extra_css     extra_javascript  extra_javascript     extra  extra     include_nav  include_nav     include_next_prev  include_next_prev     copyright  copyright     google_analytics  google_analytics      The following variables provide information about the navigation and location.  nav \uf0c1  The  nav  variable is used to create the navigation for for the documentation. Following is a basic usage example which outputs the first and second level navigation as a nested list.  ul \n  {% for nav_item in nav %}\n      {% if nav_item.children %}\n           li {{ nav_item.title }}\n               ul \n              {% for nav_item in nav_item.children %}\n                   li class= {% if nav_item.active%}current{%endif%} \n                       a href= {{ nav_item.url }} {{ nav_item.title }} /a \n                   /li \n              {% endfor %}\n               /ul \n           /li \n      {% else %}\n           li class= {% if nav_item.active%}current{%endif%} \n               a href= {{ nav_item.url }} {{ nav_item.title }} /a \n           /li \n      {% endif %}\n\n  {% endfor %} /ul   base_url \uf0c1  The  base_url  provides a relative path to the root of the MkDocs project. This makes it easy to include links to static assets in your theme. For example, if your theme includes a  js  folder, to include  theme.js  from that folder on all pages you would do this:  script src= {{ base_url }}/js/theme.js /script   homepage_url \uf0c1  Provides a relative path to the documentation homepage.  mkdocs_version \uf0c1  Contains the current MkDocs version.  build_date_utc \uf0c1  A Python datetime object that includes represents the time the documentation was built in UTC. This is useful for showing how recently the documentation was updated.  Page Context \uf0c1  The page context includes all of the above Global context and the following additional variables.  page_title \uf0c1  Contains the Title for the current page.  page_description \uf0c1  Contains the description for the current page on the homepage, it is blank on other pages.  content \uf0c1  The rendered Markdown as HTML, this is the contents of the documentation.  toc \uf0c1  An object representing the Table of contents for a page. Displaying the table of contents as a simple list can be achieved like this.     ul \n  {% for toc_item in toc %}\n       li a href= {{ toc_item.url }} {{ toc_item.title }} /a /li \n      {% for toc_item in toc_item.children %}\n           li a href= {{ toc_item.url }} {{ toc_item.title }} /a /li \n      {% endfor %}\n  {% endfor %}\n   /ul   meta \uf0c1  A mapping of the metadata included at the top of the markdown page.  canonical_url \uf0c1  The full, canonical URL to the current page. This includes the site_url from the configuration.  current_page \uf0c1  The page object for the current page. The page path and url properties can be displayed like this.  h1 {{ current_page.title }} /h1  p  This page is at {{ current_page.url }} /p   previous_page \uf0c1  The page object for the previous  page. The isage is the same as for current_page .  next_page \uf0c1  The page object for the next page.The isage is the same as for  current_page .  Extra Context \uf0c1  Additional variables can be passed to the template with the  extra  configuration option. This is a set of key value pairs that can make custom templates far more flexible.  For example, this could be used to include the project version of all pages and a list of links related to the project. This can be achieved with the following  extra  configuration:  extra:\n    version: 0.13.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/  And then displayed with this HTML in the custom theme.  {{ config.extra.version }}\n\n{% if config.extra.links %}\n   ul \n  {% for link in config.extra.links %}\n       li {{ link }} /li \n  {% endfor %}\n   /ul \n{% endif %}  Search and themes \uf0c1  As of MkDocs  0.13  client side search support has been added to MkDocs with  Lunr.js .  Search can either be added to every page in the theme or to a dedicated template which must be named  search.html . The search template will be build with the same name and can be viewable with  mkdocs serve  at  http://localhost:8000/search.html . An example of the two different approaches can be seen by comparing the  mkdocs  and  readthedocs  themes.  The following HTML needs to be added to the theme so the JavaScript is loaded for Lunr.js.  script var base_url = '{{ base_url }}'; /script  script data-main=\"{{ base_url }}/mkdocs/js/search.js\" src=\"{{ base_url }}/mkdocs/js/require.js\" /script    Note  The above JavaScript will download the search index, for larger documentation projects this can be a heavy operation. In those cases, it is suggested that you either use the  search.html  approach to only include search on one page or load the JavaScript on an event like a form submit.   This loads the JavaScript and sets a global variable  base_url  which allows the JavaScript to make the links relative to the current page. The above JavaScript, with the following HTML in a  search.html  template will add a full search implementation to your theme.  h1 id=\"search\" Search Results /h1  form action=\"search.html\" \n   input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" class=\"search_input search-query ui-autocomplete-input\" placeholder=\"Search the Docs\" autocomplete=\"off\"  /form  div id=\"mkdocs-search-results\" \n  Sorry, page not found. /div   This works by looking for the specific ID's used in the above HTML. The input for the user to type the search query must have the ID  mkdocs-search-query  and  mkdocs-search-results  is the directory where the results will be placed.", 
            "title": "Custom themes"
        }, 
        {
            "location": "/user-guide/writing-your-docs/", 
            "text": "Writing your docs\n\uf0c1\n\n\nHow to write and layout your markdown source files.\n\n\n\n\nConfigure Pages and Navigation\n\uf0c1\n\n\nThe \npages configuration\n in your \nmkdocs.yml\n defines which pages are built by MkDocs and how they appear in the documentation navigation. If not provided, the pages configuration will be automatically created by discovering all the Markdown files in the \ndocumentation directory\n.\n\n\nA simple pages configuration looks like this:\n\n\npages:\n- 'index.md'\n- 'about.md'\n\n\n\nWith this example we will build two pages at the top level and they will automatically have their titles inferred from the filename. To provide a custom name for these pages, they can be added before the filename.\n\n\npages:\n- Home: 'index.md'\n- About: 'about.md'\n\n\n\nMultilevel documentation\n\uf0c1\n\n\nTo create a second level in the navigation and group topics, the category can be provided before the page title. This is best demonstrated in a documentation project with more pages and is slightly more complicated.\n\n\npages:\n- Home: 'index.md'\n- User Guide:\n    - 'Writing your docs': 'user-guide/writing-your-docs.md'\n    - 'Styling your docs': 'user-guide/styling-your-docs.md'\n- About:\n    - 'License': 'about/license.md'\n    - 'Release Notes': 'about/release-notes.md'\n\n\n\nWith the above configuration we have three top level sections Home, User Guide and About. Then under User Guide we have two pages, Writing your docs and Styling your docs. Under the About section we also have two pages, License and Release Notes\n\n\nNote:\n At present MkDocs only supports a second level of navigation.\n\n\nFile layout\n\uf0c1\n\n\nYour documentation source should be written as regular Markdown files, and placed in a directory somewhere in your project.  Normally this directory will be named \ndocs\n and will exist at the top level of your project, alongside the \nmkdocs.yml\n configuration file.\n\n\nThe simplest project you can create will look something like this:\n\n\nmkdocs.yml\ndocs/\n    index.md\n\n\n\nBy convention your project homepage should always be named \nindex\n.  Any of the following extensions may be used for your Markdown source files: \nmarkdown\n, \nmdown\n, \nmkdn\n, \nmkd\n, \nmd\n.\n\n\nYou can also create multi-page documentation, by creating several markdown files:\n\n\nmkdocs.yml\ndocs/\n    index.md\n    about.md\n    license.md\n\n\n\nThe file layout you use determines the URLs that are used for the generated pages.\nGiven the above layout, pages would be generated for the following URLs:\n\n\n/\n/about/\n/license/\n\n\n\nYou can also include your Markdown files in nested directories if that better suits your documentation layout.\n\n\ndocs/\n    index.md\n    user-guide/getting-started.md\n    user-guide/configuration-options.md\n    license.md\n\n\n\nSource files inside nested directories will cause pages to be generated with nested URLs, like so:\n\n\n/\n/user-guide/getting-started/\n/user-guide/configuration-options/\n/license/\n\n\n\nLinking documents\n\uf0c1\n\n\nMkDocs allows you to interlink your documentation by using regular Markdown hyperlinks.\n\n\nInternal hyperlinks\n\uf0c1\n\n\nWhen linking between pages in the documentation you can simply use the regular Markdown hyperlinking syntax, including the relative path to the Markdown document you wish to link to.\n\n\nPlease see the [project license](license.md) for further details.\n\n\n\nWhen the MkDocs build runs, these hyperlinks will automatically be transformed into a hyperlink to the appropriate HTML page.\n\n\nWhen working on your documentation you should be able to open the linked Markdown document in a new editor window simply by clicking on the link.\n\n\nIf the target documentation file is in another directory you'll need to make sure to include any relative directory path in the hyperlink.\n\n\nPlease see the [project license](../about/license.md) for further details.\n\n\n\nYou can also link to a section within a target documentation page by using an anchor link.  The generated HTML will correctly transform the path portion of the hyperlink, and leave the anchor portion intact.\n\n\nPlease see the [project license](about.md#license) for further details.\n\n\n\n\n\n\nImages and media\n\uf0c1\n\n\nAs well as the Markdown source files, you can also include other file types in your documentation, which will be copied across when generating your documentation site.  These might include images and other media.\n\n\nFor example, if your project documentation needed to include a \nGitHub pages CNAME file\n and a PNG formatted screenshot image then your file layout might look as follows:\n\n\nmkdocs.yml\ndocs/\n    CNAME\n    index.md\n    about.md\n    license.md\n    img/\n        screenshot.png\n\n\n\nTo include images in your documentation source files, simply use any of the regular Markdown image syntaxes:\n\n\nCupcake indexer is a snazzy new project for indexing small cakes.\n\n![Screenshot](img/screenshot.png)\n\n*Above: Cupcake indexer in progress*\n\n\n\nYou image will now be embedded when you build the documentation, and should also be previewed if you're working on the documentation with a Markdown editor.\n\n\nMarkdown extensions\n\uf0c1\n\n\nMkDocs supports the following Markdown extensions.\n\n\n\n\n\nTables\n\uf0c1\n\n\nA simple table looks like this:\n\n\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n\n\n\n\nIf you wish, you can add a leading and tailing pipe to each line of the table:\n\n\n| First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |\n\n\n\n\nSpecify alignment for each column by adding colons to separator lines:\n\n\nFirst Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n\n\n\n\nFenced code blocks\n\uf0c1\n\n\nStart with a line containing 3 or more backtick ` characters, and ends with the first line with the same number of backticks `:\n\n\n```\nFenced code blocks are like Stardard\nMarkdown\u2019s regular code blocks, except that\nthey\u2019re not indented and instead rely on a\nstart and end fence lines to delimit the code\nblock.\n```\n\n\n\nWith the approach, the language can be specified on the first line after the backticks:\n\n\n```python\ndef fn():\n pass\n```", 
            "title": "Writing your docs"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#writing-your-docs", 
            "text": "How to write and layout your markdown source files.", 
            "title": "Writing your docs"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#configure-pages-and-navigation", 
            "text": "The  pages configuration  in your  mkdocs.yml  defines which pages are built by MkDocs and how they appear in the documentation navigation. If not provided, the pages configuration will be automatically created by discovering all the Markdown files in the  documentation directory .  A simple pages configuration looks like this:  pages:\n- 'index.md'\n- 'about.md'  With this example we will build two pages at the top level and they will automatically have their titles inferred from the filename. To provide a custom name for these pages, they can be added before the filename.  pages:\n- Home: 'index.md'\n- About: 'about.md'  Multilevel documentation \uf0c1  To create a second level in the navigation and group topics, the category can be provided before the page title. This is best demonstrated in a documentation project with more pages and is slightly more complicated.  pages:\n- Home: 'index.md'\n- User Guide:\n    - 'Writing your docs': 'user-guide/writing-your-docs.md'\n    - 'Styling your docs': 'user-guide/styling-your-docs.md'\n- About:\n    - 'License': 'about/license.md'\n    - 'Release Notes': 'about/release-notes.md'  With the above configuration we have three top level sections Home, User Guide and About. Then under User Guide we have two pages, Writing your docs and Styling your docs. Under the About section we also have two pages, License and Release Notes  Note:  At present MkDocs only supports a second level of navigation.", 
            "title": "Configure Pages and Navigation"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#file-layout", 
            "text": "Your documentation source should be written as regular Markdown files, and placed in a directory somewhere in your project.  Normally this directory will be named  docs  and will exist at the top level of your project, alongside the  mkdocs.yml  configuration file.  The simplest project you can create will look something like this:  mkdocs.yml\ndocs/\n    index.md  By convention your project homepage should always be named  index .  Any of the following extensions may be used for your Markdown source files:  markdown ,  mdown ,  mkdn ,  mkd ,  md .  You can also create multi-page documentation, by creating several markdown files:  mkdocs.yml\ndocs/\n    index.md\n    about.md\n    license.md  The file layout you use determines the URLs that are used for the generated pages.\nGiven the above layout, pages would be generated for the following URLs:  /\n/about/\n/license/  You can also include your Markdown files in nested directories if that better suits your documentation layout.  docs/\n    index.md\n    user-guide/getting-started.md\n    user-guide/configuration-options.md\n    license.md  Source files inside nested directories will cause pages to be generated with nested URLs, like so:  /\n/user-guide/getting-started/\n/user-guide/configuration-options/\n/license/", 
            "title": "File layout"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#linking-documents", 
            "text": "MkDocs allows you to interlink your documentation by using regular Markdown hyperlinks.  Internal hyperlinks \uf0c1  When linking between pages in the documentation you can simply use the regular Markdown hyperlinking syntax, including the relative path to the Markdown document you wish to link to.  Please see the [project license](license.md) for further details.  When the MkDocs build runs, these hyperlinks will automatically be transformed into a hyperlink to the appropriate HTML page.  When working on your documentation you should be able to open the linked Markdown document in a new editor window simply by clicking on the link.  If the target documentation file is in another directory you'll need to make sure to include any relative directory path in the hyperlink.  Please see the [project license](../about/license.md) for further details.  You can also link to a section within a target documentation page by using an anchor link.  The generated HTML will correctly transform the path portion of the hyperlink, and leave the anchor portion intact.  Please see the [project license](about.md#license) for further details.", 
            "title": "Linking documents"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#images-and-media", 
            "text": "As well as the Markdown source files, you can also include other file types in your documentation, which will be copied across when generating your documentation site.  These might include images and other media.  For example, if your project documentation needed to include a  GitHub pages CNAME file  and a PNG formatted screenshot image then your file layout might look as follows:  mkdocs.yml\ndocs/\n    CNAME\n    index.md\n    about.md\n    license.md\n    img/\n        screenshot.png  To include images in your documentation source files, simply use any of the regular Markdown image syntaxes:  Cupcake indexer is a snazzy new project for indexing small cakes.\n\n![Screenshot](img/screenshot.png)\n\n*Above: Cupcake indexer in progress*  You image will now be embedded when you build the documentation, and should also be previewed if you're working on the documentation with a Markdown editor.", 
            "title": "Images and media"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#markdown-extensions", 
            "text": "MkDocs supports the following Markdown extensions.   Tables \uf0c1  A simple table looks like this:  First Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell  If you wish, you can add a leading and tailing pipe to each line of the table:  | First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |  Specify alignment for each column by adding colons to separator lines:  First Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right  Fenced code blocks \uf0c1  Start with a line containing 3 or more backtick ` characters, and ends with the first line with the same number of backticks `:  ```\nFenced code blocks are like Stardard\nMarkdown\u2019s regular code blocks, except that\nthey\u2019re not indented and instead rely on a\nstart and end fence lines to delimit the code\nblock.\n```  With the approach, the language can be specified on the first line after the backticks:  ```python\ndef fn():\n pass\n```", 
            "title": "Markdown extensions"
        }, 
        {
            "location": "/about/contributing/", 
            "text": "Contributing to MkDocs\n\uf0c1\n\n\nAn introduction to contributing to the MkDocs project.\n\n\nThe MkDocs project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:\n\n\n\n\nCode patches via pull requests\n\n\nDocumentation improvements\n\n\nBug reports and patch reviews\n\n\n\n\nReporting an Issue?\n\uf0c1\n\n\nPlease include as much detail as you can. Let us know your platform and MkDocs\nversion. If the problem is visual (for example a theme or design issue) please\nadd a screenshot and if you get an error please include the the full error and\ntraceback.\n\n\nTesting the Development Version\n\uf0c1\n\n\nIf you want to just install and try out the latest development version of\nMkDocs you can do so with the following command. This can be useful if you\nwant to provide feedback for a new feature or want to confirm if a bug you\nhave encountered is fixed in the git master. It is \nstrongly\n recommended\nthat you do this within a \nvirtualenv\n.\n\n\npip install https://github.com/mkdocs/mkdocs/archive/master.tar.gz\n\n\n\n\nInstalling for Development\n\uf0c1\n\n\nFirst you'll need to fork and clone the repository. Once you have a local\ncopy, run the following command. It is \nstrongly\n recommended that you do\nthis within a \nvirtualenv\n.\n\n\npip install --editable .\n\n\n\n\nThis will install MkDocs in development mode which binds the \nmkdocs\n command\nto the git repository.\n\n\nRunning the tests\n\uf0c1\n\n\nTo run the tests, it is recommended that you use \nTox\n. This just needs\nto be pip installed and then the test suite can be ran for MkDocs but running\nthe command \ntox\n in the root of your MkDocs repository.\n\n\nIt will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by \nTravis\n when you submit a pull request.\n\n\nSubmitting Pull Requests\n\uf0c1\n\n\nOnce you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.", 
            "title": "Contributing"
        }, 
        {
            "location": "/about/contributing/#contributing-to-mkdocs", 
            "text": "An introduction to contributing to the MkDocs project.  The MkDocs project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:   Code patches via pull requests  Documentation improvements  Bug reports and patch reviews", 
            "title": "Contributing to MkDocs"
        }, 
        {
            "location": "/about/contributing/#reporting-an-issue", 
            "text": "Please include as much detail as you can. Let us know your platform and MkDocs\nversion. If the problem is visual (for example a theme or design issue) please\nadd a screenshot and if you get an error please include the the full error and\ntraceback.", 
            "title": "Reporting an Issue?"
        }, 
        {
            "location": "/about/contributing/#testing-the-development-version", 
            "text": "If you want to just install and try out the latest development version of\nMkDocs you can do so with the following command. This can be useful if you\nwant to provide feedback for a new feature or want to confirm if a bug you\nhave encountered is fixed in the git master. It is  strongly  recommended\nthat you do this within a  virtualenv .  pip install https://github.com/mkdocs/mkdocs/archive/master.tar.gz", 
            "title": "Testing the Development Version"
        }, 
        {
            "location": "/about/contributing/#installing-for-development", 
            "text": "First you'll need to fork and clone the repository. Once you have a local\ncopy, run the following command. It is  strongly  recommended that you do\nthis within a  virtualenv .  pip install --editable .  This will install MkDocs in development mode which binds the  mkdocs  command\nto the git repository.", 
            "title": "Installing for Development"
        }, 
        {
            "location": "/about/contributing/#running-the-tests", 
            "text": "To run the tests, it is recommended that you use  Tox . This just needs\nto be pip installed and then the test suite can be ran for MkDocs but running\nthe command  tox  in the root of your MkDocs repository.  It will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by  Travis  when you submit a pull request.", 
            "title": "Running the tests"
        }, 
        {
            "location": "/about/contributing/#submitting-pull-requests", 
            "text": "Once you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.", 
            "title": "Submitting Pull Requests"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\uf0c1\n\n\nThe legal stuff.\n\n\n\n\nIncluded projects\n\uf0c1\n\n\nThemes used under license from the Bootstrap, ReadTheDocs, GhostWriter and Bootswatch projects.\n\n\n\n\nBootstrap theme - \nView license\n.\n\n\nReadTheDocs theme - \nView license\n.\n\n\nBootswatch theme - \nView license\n.\n\n\nHighlight.js GitHub theme - \nView license\n.\n\n\n\n\nMany thanks to the authors and contributors of those wonderful projects.\n\n\nMkDocs License (BSD)\n\uf0c1\n\n\nCopyright \u00a9 2014, Tom Christie. All rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "The legal stuff.   Included projects \uf0c1  Themes used under license from the Bootstrap, ReadTheDocs, GhostWriter and Bootswatch projects.   Bootstrap theme -  View license .  ReadTheDocs theme -  View license .  Bootswatch theme -  View license .  Highlight.js GitHub theme -  View license .   Many thanks to the authors and contributors of those wonderful projects.  MkDocs License (BSD) \uf0c1  Copyright \u00a9 2014, Tom Christie. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/about/release-notes/", 
            "text": "Release Notes\n\uf0c1\n\n\n\n\nUpgrading\n\uf0c1\n\n\nTo upgrade MkDocs to the latest version, use pip:\n\n\npip install -U mkdocs\n\n\n\nYou can determine your currently installed version using \nmkdocs --version\n:\n\n\n$ mkdocs --version\nmkdocs, version 0.13.0\n\n\n\nVersion 0.13.1 (2015-05-27)\n\uf0c1\n\n\n\n\nBugfix: Fix a problem with minimal configurations which only contain a list\n  of paths in the pages config (#562)\n\n\n\n\nVersion 0.13.0 (2015-05-26)\n\uf0c1\n\n\nDeprecations\n\uf0c1\n\n\nDeprecate the JSON command\n\uf0c1\n\n\nIn this release the  \nmkdocs json\n command has been marked as deprecated and\nwhen used a deprecation warning will be shown. It will be removed in a \nfuture\nrelease\n of MkDocs, version 1.0 at the latest. The \nmkdocs json\n command\nprovided  a convenient way for users to output the documentation contents as\nJSON files but with the additions of search to MkDocs this functionality is\nduplicated.\n\n\nA new index with all the contents from a MkDocs build is created in the\n\nsite_dir\n, so with the default value for the \nsite_dir\n It can be found in\n\nsite/mkdocs/search_index.json\n.\n\n\nThis new file is created on every MkDocs build (with \nmkdocs build\n) and\nno configuration is needed to enable it.\n\n\nChange the pages configuration\n\uf0c1\n\n\nProvide a \nnew way\n to define pages, and specifically \nnested pages\n, in the\nmkdocs.yml file and deprecate the existing approach, support will be removed\nwith MkDocs 1.0.\n\n\nWarn users about the removal of builtin themes\n\uf0c1\n\n\nAll themes other than mkdocs and readthedocs will be moved into external\npackages in a future release of MkDocs. This will enable them to be more easily\nsupported and updates outside MkDocs releases.\n\n\nMajor Additions\n\uf0c1\n\n\nSearch\n\uf0c1\n\n\nSupport for search has now been added to MkDocs. This is based on the\nJavaScript library \nlunr.js\n. It has been added to both the \nmkdocs\n and\n\nreadthedocs\n themes. See the custom theme documentation on \nsupporting search\n\nfor adding it to your own themes.\n\n\nNew Command Line Interface\n\uf0c1\n\n\nThe command line interface for MkDocs has been re-written with the Python\nlibrary \nClick\n. This means that MkDocs now has an easier to use interface\nwith better help output.\n\n\nThis change is partially backwards incompatible as while undocumented it was\npossible to pass any configuration option to the different commands. Now only\na small subset of the configuration options can be passed to the commands. To\nsee in full commands and available arguments use \nmkdocs --help\n and\n\nmkdocs build --help\n to have them displayed.\n\n\nSupport Extra HTML and XML files\n\uf0c1\n\n\nLike the \nextra_javascript\n and \nextra_css\n configuration options, a new\noption named \nextra_templates\n has been added. This will automatically be\npopulated with any \n.html\n or \n.xml\n files in the project docs directory.\n\n\nUsers can place static HTML and XML files and they will be copied over, or they\ncan also use Jinja2 syntax and take advantage of the \nglobal variables\n.\n\n\nBy default MkDocs will use this approach to create a sitemap for the\ndocumentation.\n\n\nOther Changes and Additions\n\uf0c1\n\n\n\n\nAdd support for \nMarkdown extension configuration options\n. (#435)\n\n\nMkDocs now ships Python \nwheels\n. (#486)\n\n\nOnly include the build date and MkDocs version on the homepage. (#490)\n\n\nGenerate sitemaps for documentation builds. (#436)\n\n\nAdd a clearer way to define nested pages in the configuration. (#482)\n\n\nAdd an \nextra config\n option for passing arbitrary variables to the template. (#510)\n\n\nAdd \n--no-livereload\n to \nmkdocs serve\n for a simpler development server. (#511)\n\n\nAdd copyright display support to all themes (#549)\n\n\nAdd support for custom commit messages in a \nmkdocs gh-deploy\n (#516)\n\n\nBugfix: Fix linking to media within the same directory as a markdown file called index.md (#535)\n\n\nBugfix: Fix errors with unicode filenames (#542).\n\n\n\n\nVersion 0.12.2 (2015-04-22)\n\uf0c1\n\n\n\n\nBugfix: Fix a regression where there would be an error if some child titles\n  were missing but others were provided in the pages config. (#464)\n\n\n\n\nVersion 0.12.1 (2015-04-14)\n\uf0c1\n\n\n\n\nBugfix: Fixed a CSS bug in the table of contents on some browsers where the\n  bottom item was not clickable.\n\n\n\n\nVersion 0.12.0 (2015-04-14)\n\uf0c1\n\n\n\n\nDisplay the current MkDocs version in the CLI output. (#258)\n\n\nCheck for CNAME file when using gh-deploy. (#285)\n\n\nAdd the homepage back to the navigation on all themes. (#271)\n\n\nAdd a strict more for local link checking. (#279)\n\n\nAdd Google analytics support to all themes. (#333)\n\n\nAdd build date and MkDocs version to the ReadTheDocs and MkDocs theme\n  outputs. (#382)\n\n\nStandardise highlighting across all themes and add missing languages. (#387)\n\n\nAdd a verbose flag. (-v) to show more details about what the build. (#147)\n\n\nAdd the option to specify a remote branch when deploying to GitHub. This\n  enables deploying to GitHub pages on personal and repo sites. (#354)\n\n\nAdd favicon support to the ReadTheDocs theme HTML. (#422)\n\n\nAutomatically refresh the browser when files are edited. (#163)\n\n\nBugfix: Never re-write URL's in code blocks. (#240)\n\n\nBugfix: Don't copy ditfiles when copying media from the \ndocs_dir\n. (#254)\n\n\nBugfix: Fix the rendering of tables in the ReadTheDocs theme. (#106)\n\n\nBugfix: Add padding to the bottom of all bootstrap themes. (#255)\n\n\nBugfix: Fix issues with nested Markdown pages and the automatic pages\n  configuration. (#276)\n\n\nBugfix: Fix a URL parsing error with GitHub enterprise. (#284)\n\n\nBugfix: Don't error if the mkdocs.yml is completely empty. (#288)\n\n\nBugfix: Fix a number of problems with relative urls and Markdown files. (#292)\n\n\nBugfix: Don't stop the build if a page can't be found, continue with other\n  pages. (#150)\n\n\nBugfix: Remove the site_name from the page title, this needs to be added\n  manually. (#299)\n\n\nBugfix: Fix an issue with table of contents cutting off Markdown. (#294)\n\n\nBugfix: Fix hostname for BitBucket. (#339)\n\n\nBugfix: Ensure all links end with a slash. (#344)\n\n\nBugfix: Fix repo links in the readthedocs theme. (#365)\n\n\nBugfix: Include jQuery locally to avoid problems using MkDocs offline. (#143)\n\n\nBugfix: Don't allow the docs_dir to be in the site_dir or vice versa. (#384)\n\n\nBugfix: Remove inline CSS in the ReadTheDocs theme. (#393)\n\n\nBugfix: Fix problems with the child titles due to the order the pages config\n  was processed. (#395)\n\n\nBugfix: Don't error during live reload when the theme doesn't exist. (#373)\n\n\nBugfix: Fix problems with the Meta extension when it may not exist. (#398)\n\n\nBugfix: Wrap long inline code otherwise they will run off the screen. (#313)\n\n\nBugfix: Remove HTML parsing regular expressions and parse with HTMLParser to\n  fix problems with titles containing code. (#367)\n\n\nBugfix: Fix an issue with the scroll to anchor causing the title to be hidden\n  under the navigation. (#7)\n\n\nBugfix: Add nicer CSS classes to the HTML tables in bootswatch themes. (#295)\n\n\nBugfix: Fix an error when passing in a specific config file with\n  \nmkdocs serve\n. (#341)\n\n\nBugfix: Don't overwrite index.md diles with the \nmkdocs new\n command. (#412)\n\n\nBugfix: Remove bold and italic from code in the ReadTheDocs theme. (#411)\n\n\nBugfix: Display images inline in the MkDocs theme. (#415)\n\n\nBugfix: Fix problems with no-highlight in the ReadTheDocs theme. (#319)\n\n\nBugfix: Don't delete hidden files when using \nmkdocs build --clean\n. (#346)\n\n\nBugfix: Don't block newer verions of Python-markdown on Python \n= 2.7. (#376)\n\n\nBugfix: Fix encoding issues when opening files across platforms. (#428)\n\n\n\n\nVersion 0.11.1 (2014-11-20)\n\uf0c1\n\n\n\n\nBugfix: Fix a CSS wrapping issue with code highlighting in the ReadTheDocs\n  theme. (#233)\n\n\n\n\nVersion 0.11.0 (2014-11-18)\n\uf0c1\n\n\n\n\nRender 404.html files if they exist for the current theme. (#194)\n\n\nBugfix: Fix long nav bars, table rendering and code highlighting in MkDocs\n  and ReadTheDocs themes. (#225)\n\n\nBugfix: Fix an issue with the google_analytics code. (#219)\n\n\nBugfix: Remove \n__pycache__\n from the package tar. (#196)\n\n\nBugfix: Fix markdown links that go to an anchor on the current page. (#197)\n\n\nBugfix: Don't add \nprettyprint well\n CSS classes to all HTML, only add it in\n  the MkDocs theme. (#183)\n\n\nBugfix: Display section titles in the ReadTheDocs theme. (#175)\n\n\nBugfix: Use the polling observer in watchdog so rebuilding works on\n  filesystems without inotify. (#184)\n\n\nBugfix: Improve error output for common configuration related errors. (#176)\n\n\n\n\nVersion 0.10.0 (2014-10-29)\n\uf0c1\n\n\n\n\nAdded support for Python 3.3 and 3.4. (#103)\n\n\nConfigurable Python-Markdown extensions with the config setting\n  \nmarkdown_extensions\n. (#74)\n\n\nAdded \nmkdocs json\n command to output your rendered\n  documentation as json files. (#128)\n\n\nAdded \n--clean\n switch to \nbuild\n, \njson\n and \ngh-deploy\n commands to\n  remove stale files from the output directory. (#157)\n\n\nSupport multiple theme directories to allow replacement of\n  individual templates rather than copying the full theme. (#129)\n\n\nBugfix: Fix \nul\n rendering in readthedocs theme. (#171)\n\n\nBugfix: Improve the readthedocs theme on smaller displays. (#168)\n\n\nBugfix: Relaxed required python package versions to avoid clashes. (#104)\n\n\nBugfix: Fix issue rendering the table of contents with some configs. (#146)\n\n\nBugfix: Fix path for embedded images in sub pages. (#138)\n\n\nBugfix: Fix \nuse_directory_urls\n config behaviour. (#63)\n\n\nBugfix: Support \nextra_javascript\n and \nextra_css\n in all themes. (#90)\n\n\nBugfix: Fix path-handling under Windows. (#121)\n\n\nBugfix: Fix the menu generation in the readthedocs theme. (#110)\n\n\nBugfix: Fix the mkdocs command creation under Windows. (#122)\n\n\nBugfix: Correctly handle external \nextra_javascript\n and \nextra_css\n. (#92)\n\n\nBugfix: Fixed favicon support. (#87)", 
            "title": "Release notes"
        }, 
        {
            "location": "/about/release-notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release-notes/#upgrading", 
            "text": "To upgrade MkDocs to the latest version, use pip:  pip install -U mkdocs  You can determine your currently installed version using  mkdocs --version :  $ mkdocs --version\nmkdocs, version 0.13.0", 
            "title": "Upgrading"
        }, 
        {
            "location": "/about/release-notes/#version-0131-2015-05-27", 
            "text": "Bugfix: Fix a problem with minimal configurations which only contain a list\n  of paths in the pages config (#562)", 
            "title": "Version 0.13.1 (2015-05-27)"
        }, 
        {
            "location": "/about/release-notes/#version-0130-2015-05-26", 
            "text": "Deprecations \uf0c1  Deprecate the JSON command \uf0c1  In this release the   mkdocs json  command has been marked as deprecated and\nwhen used a deprecation warning will be shown. It will be removed in a  future\nrelease  of MkDocs, version 1.0 at the latest. The  mkdocs json  command\nprovided  a convenient way for users to output the documentation contents as\nJSON files but with the additions of search to MkDocs this functionality is\nduplicated.  A new index with all the contents from a MkDocs build is created in the site_dir , so with the default value for the  site_dir  It can be found in site/mkdocs/search_index.json .  This new file is created on every MkDocs build (with  mkdocs build ) and\nno configuration is needed to enable it.  Change the pages configuration \uf0c1  Provide a  new way  to define pages, and specifically  nested pages , in the\nmkdocs.yml file and deprecate the existing approach, support will be removed\nwith MkDocs 1.0.  Warn users about the removal of builtin themes \uf0c1  All themes other than mkdocs and readthedocs will be moved into external\npackages in a future release of MkDocs. This will enable them to be more easily\nsupported and updates outside MkDocs releases.  Major Additions \uf0c1  Search \uf0c1  Support for search has now been added to MkDocs. This is based on the\nJavaScript library  lunr.js . It has been added to both the  mkdocs  and readthedocs  themes. See the custom theme documentation on  supporting search \nfor adding it to your own themes.  New Command Line Interface \uf0c1  The command line interface for MkDocs has been re-written with the Python\nlibrary  Click . This means that MkDocs now has an easier to use interface\nwith better help output.  This change is partially backwards incompatible as while undocumented it was\npossible to pass any configuration option to the different commands. Now only\na small subset of the configuration options can be passed to the commands. To\nsee in full commands and available arguments use  mkdocs --help  and mkdocs build --help  to have them displayed.  Support Extra HTML and XML files \uf0c1  Like the  extra_javascript  and  extra_css  configuration options, a new\noption named  extra_templates  has been added. This will automatically be\npopulated with any  .html  or  .xml  files in the project docs directory.  Users can place static HTML and XML files and they will be copied over, or they\ncan also use Jinja2 syntax and take advantage of the  global variables .  By default MkDocs will use this approach to create a sitemap for the\ndocumentation.  Other Changes and Additions \uf0c1   Add support for  Markdown extension configuration options . (#435)  MkDocs now ships Python  wheels . (#486)  Only include the build date and MkDocs version on the homepage. (#490)  Generate sitemaps for documentation builds. (#436)  Add a clearer way to define nested pages in the configuration. (#482)  Add an  extra config  option for passing arbitrary variables to the template. (#510)  Add  --no-livereload  to  mkdocs serve  for a simpler development server. (#511)  Add copyright display support to all themes (#549)  Add support for custom commit messages in a  mkdocs gh-deploy  (#516)  Bugfix: Fix linking to media within the same directory as a markdown file called index.md (#535)  Bugfix: Fix errors with unicode filenames (#542).", 
            "title": "Version 0.13.0 (2015-05-26)"
        }, 
        {
            "location": "/about/release-notes/#version-0122-2015-04-22", 
            "text": "Bugfix: Fix a regression where there would be an error if some child titles\n  were missing but others were provided in the pages config. (#464)", 
            "title": "Version 0.12.2 (2015-04-22)"
        }, 
        {
            "location": "/about/release-notes/#version-0121-2015-04-14", 
            "text": "Bugfix: Fixed a CSS bug in the table of contents on some browsers where the\n  bottom item was not clickable.", 
            "title": "Version 0.12.1 (2015-04-14)"
        }, 
        {
            "location": "/about/release-notes/#version-0120-2015-04-14", 
            "text": "Display the current MkDocs version in the CLI output. (#258)  Check for CNAME file when using gh-deploy. (#285)  Add the homepage back to the navigation on all themes. (#271)  Add a strict more for local link checking. (#279)  Add Google analytics support to all themes. (#333)  Add build date and MkDocs version to the ReadTheDocs and MkDocs theme\n  outputs. (#382)  Standardise highlighting across all themes and add missing languages. (#387)  Add a verbose flag. (-v) to show more details about what the build. (#147)  Add the option to specify a remote branch when deploying to GitHub. This\n  enables deploying to GitHub pages on personal and repo sites. (#354)  Add favicon support to the ReadTheDocs theme HTML. (#422)  Automatically refresh the browser when files are edited. (#163)  Bugfix: Never re-write URL's in code blocks. (#240)  Bugfix: Don't copy ditfiles when copying media from the  docs_dir . (#254)  Bugfix: Fix the rendering of tables in the ReadTheDocs theme. (#106)  Bugfix: Add padding to the bottom of all bootstrap themes. (#255)  Bugfix: Fix issues with nested Markdown pages and the automatic pages\n  configuration. (#276)  Bugfix: Fix a URL parsing error with GitHub enterprise. (#284)  Bugfix: Don't error if the mkdocs.yml is completely empty. (#288)  Bugfix: Fix a number of problems with relative urls and Markdown files. (#292)  Bugfix: Don't stop the build if a page can't be found, continue with other\n  pages. (#150)  Bugfix: Remove the site_name from the page title, this needs to be added\n  manually. (#299)  Bugfix: Fix an issue with table of contents cutting off Markdown. (#294)  Bugfix: Fix hostname for BitBucket. (#339)  Bugfix: Ensure all links end with a slash. (#344)  Bugfix: Fix repo links in the readthedocs theme. (#365)  Bugfix: Include jQuery locally to avoid problems using MkDocs offline. (#143)  Bugfix: Don't allow the docs_dir to be in the site_dir or vice versa. (#384)  Bugfix: Remove inline CSS in the ReadTheDocs theme. (#393)  Bugfix: Fix problems with the child titles due to the order the pages config\n  was processed. (#395)  Bugfix: Don't error during live reload when the theme doesn't exist. (#373)  Bugfix: Fix problems with the Meta extension when it may not exist. (#398)  Bugfix: Wrap long inline code otherwise they will run off the screen. (#313)  Bugfix: Remove HTML parsing regular expressions and parse with HTMLParser to\n  fix problems with titles containing code. (#367)  Bugfix: Fix an issue with the scroll to anchor causing the title to be hidden\n  under the navigation. (#7)  Bugfix: Add nicer CSS classes to the HTML tables in bootswatch themes. (#295)  Bugfix: Fix an error when passing in a specific config file with\n   mkdocs serve . (#341)  Bugfix: Don't overwrite index.md diles with the  mkdocs new  command. (#412)  Bugfix: Remove bold and italic from code in the ReadTheDocs theme. (#411)  Bugfix: Display images inline in the MkDocs theme. (#415)  Bugfix: Fix problems with no-highlight in the ReadTheDocs theme. (#319)  Bugfix: Don't delete hidden files when using  mkdocs build --clean . (#346)  Bugfix: Don't block newer verions of Python-markdown on Python  = 2.7. (#376)  Bugfix: Fix encoding issues when opening files across platforms. (#428)", 
            "title": "Version 0.12.0 (2015-04-14)"
        }, 
        {
            "location": "/about/release-notes/#version-0111-2014-11-20", 
            "text": "Bugfix: Fix a CSS wrapping issue with code highlighting in the ReadTheDocs\n  theme. (#233)", 
            "title": "Version 0.11.1 (2014-11-20)"
        }, 
        {
            "location": "/about/release-notes/#version-0110-2014-11-18", 
            "text": "Render 404.html files if they exist for the current theme. (#194)  Bugfix: Fix long nav bars, table rendering and code highlighting in MkDocs\n  and ReadTheDocs themes. (#225)  Bugfix: Fix an issue with the google_analytics code. (#219)  Bugfix: Remove  __pycache__  from the package tar. (#196)  Bugfix: Fix markdown links that go to an anchor on the current page. (#197)  Bugfix: Don't add  prettyprint well  CSS classes to all HTML, only add it in\n  the MkDocs theme. (#183)  Bugfix: Display section titles in the ReadTheDocs theme. (#175)  Bugfix: Use the polling observer in watchdog so rebuilding works on\n  filesystems without inotify. (#184)  Bugfix: Improve error output for common configuration related errors. (#176)", 
            "title": "Version 0.11.0 (2014-11-18)"
        }, 
        {
            "location": "/about/release-notes/#version-0100-2014-10-29", 
            "text": "Added support for Python 3.3 and 3.4. (#103)  Configurable Python-Markdown extensions with the config setting\n   markdown_extensions . (#74)  Added  mkdocs json  command to output your rendered\n  documentation as json files. (#128)  Added  --clean  switch to  build ,  json  and  gh-deploy  commands to\n  remove stale files from the output directory. (#157)  Support multiple theme directories to allow replacement of\n  individual templates rather than copying the full theme. (#129)  Bugfix: Fix  ul  rendering in readthedocs theme. (#171)  Bugfix: Improve the readthedocs theme on smaller displays. (#168)  Bugfix: Relaxed required python package versions to avoid clashes. (#104)  Bugfix: Fix issue rendering the table of contents with some configs. (#146)  Bugfix: Fix path for embedded images in sub pages. (#138)  Bugfix: Fix  use_directory_urls  config behaviour. (#63)  Bugfix: Support  extra_javascript  and  extra_css  in all themes. (#90)  Bugfix: Fix path-handling under Windows. (#121)  Bugfix: Fix the menu generation in the readthedocs theme. (#110)  Bugfix: Fix the mkdocs command creation under Windows. (#122)  Bugfix: Correctly handle external  extra_javascript  and  extra_css . (#92)  Bugfix: Fixed favicon support. (#87)", 
            "title": "Version 0.10.0 (2014-10-29)"
        }
    ]
}