{
    "content": "<h1 id=\"mkdocs\">MkDocs</h1>\n<p>Project documentation with&nbsp;Markdown.</p>\n<hr />\n<h2 id=\"overview\">Overview</h2>\n<p>MkDocs is a <strong>fast</strong>, <strong>simple</strong> and <strong>downright gorgeous</strong> static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p>\n<hr />\n<p><strong>MkDocs is currently still in development.</strong></p>\n<p>We're progressing quickly, but the documentation still needs filling in, and theres a few rough edges.  The 1.0 release is planned to arrive in the next few months.</p>\n<hr />\n<h4 id=\"host-anywhere\">Host anywhere.</h4>\n<p>Builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose.</p>\n<h4 id=\"great-themes-available\">Great themes available.</h4>\n<p>There's a stack of good looking themes included by default. Choose from bootstrap, readthedocs, or any of the 12 bootswatch themes.</p>\n<h4 id=\"preview-your-site-as-you-work\">Preview your site as you work.</h4>\n<p>The built-in devserver allows you to preview your documentation as you're writing it. It will even auto-reload whenever you save any changes, so all you need to do to see your latest edits is refresh your browser.</p>\n<h4 id=\"easy-to-customize\">Easy to customize.</h4>\n<p>Get your project documentation looking just the way you want it by customizing the theme.</p>\n<hr />\n<h2 id=\"installation\">Installation</h2>\n<p>In order to install MkDocs you'll need <a href=\"https://www.python.org/\">Python</a> installed on your system, as well as the Python package manager, <a href=\"http://pip.readthedocs.org/en/latest/installing.html\">pip</a>.  You can check if you have these already installed like so:</p>\n<pre><code>$ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2\n</code></pre>\n<p>MkDocs supports Python 2.6, 2.7, 3.3 and 3.4.</p>\n<p>Install the <code>mkdocs</code> package using pip:</p>\n<pre><code>$ pip install mkdocs\n</code></pre>\n<p>You should now have the <code>mkdocs</code> command installed on your system.  Run <code>mkdocs help</code> to check that everything worked okay.</p>\n<pre><code>$ mkdocs help\nmkdocs [help|new|build|serve|gh-deploy] {options}\n</code></pre>\n<hr />\n<h2 id=\"getting-started\">Getting started</h2>\n<p>Getting started is super easy.</p>\n<pre><code>$ mkdocs new my-project\n$ cd my-project\n</code></pre>\n<p>Let's take a moment to review the initial project that's been created for us.</p>\n<p><img alt=\"The initial MkDocs layout\" src=\"./img/initial-layout.png\" /></p>\n<p>There's a single configuration file named <code>mkdocs.yml</code>, and a folder named <code>docs</code> that will contain our documentation source files.  Right now the <code>docs</code> folder just contains a single documentation page, named <code>index.md</code>.</p>\n<p>MkDocs comes with a built-in webserver that lets you preview your documentation as you work on it. We start the webserver by making sure we're in the same directory as the <code>mkdocs.yml</code> config file, and then running the <code>mkdocs serve</code> command:</p>\n<pre><code>$ mkdocs serve\nRunning at: http://127.0.0.1:8000/\n</code></pre>\n<p>Open up <a href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a> in your browser, and you'll see the index page being displayed:</p>\n<p><img alt=\"The MkDocs live server\" src=\"./img/screenshot.png\" /></p>\n<p>The webserver also supports auto-reloading, and will rebuild your documentation whenever anything in the configuration file, documentation directory or theme directory changes.</p>\n<p>Go ahead and edit the <code>docs/index.md</code> file now and save the file. Then simply hit reload in the browser and you'll see your updated documentation.</p>\n<p>Now's also a good time to edit the configuration file, <code>mkdocs.yml</code>.  Change the <code>site_name</code> setting to something else and save the file.</p>\n<p><img alt=\"Editing the config file\" src=\"./img/initial-config.png\" /></p>\n<p>Once you hit reload in the browser you'll see your new site name take effect.</p>\n<p><img alt=\"The site_name setting\" src=\"./img/site-name.png\" /></p>\n<h2 id=\"adding-pages\">Adding pages</h2>\n<p>Go ahead and edit the <code>doc/index.md</code> document, and change the initial heading to <code>MkLorum</code>, then reload the site in your browser, and you should see the change take effect immediately.</p>\n<p>Let's also add a second page to our documentation:</p>\n<pre><code>$ curl 'jaspervdj.be/lorem-markdownum/markdown.txt' &gt; docs/about.md\n</code></pre>\n<p>We'd like our documentation site to include some navigation headers, so we'll edit the configuration file and add some information about the order and title to use for out headers:</p>\n<pre><code>site_name: MkLorum\npages:\n- [index.md, Home]\n- [about.md, About]\n</code></pre>\n<p>Refresh the browser and you'll now see a navigation bar with <code>Home</code> and <code>About</code> headers.</p>\n<h2 id=\"theming-our-documentation\">Theming our documentation</h2>\n<p>While we're here can also change the configuration file to alter how the documentation is displayed.  Let's go ahead and change the theme.  Edit the <code>mkdocs.yml</code> file to the following:</p>\n<pre><code>site_name: MkLorum\npages:\n- [index.md, Home]\n- [about.md, About]\ntheme: readthedocs\n</code></pre>\n<p>Refresh the browser again, and you'll now see the ReadTheDocs theme being used.</p>\n<p><img alt=\"Screenshot\" src=\"./img/readthedocs.png\" /></p>\n<h2 id=\"building-the-site\">Building the site</h2>\n<p>That's looking good.  We're ready to deploy the first pass of our <code>MkLorum</code> documentation now.  Let's build the documentation.</p>\n<pre><code>$ mkdocs build\n</code></pre>\n<p>This will create a new directory, named <code>site</code>.  Let's take a look inside the directory:</p>\n<pre><code>$ ls site\nabout css fonts img index.html js\n</code></pre>\n<p>Notice that our source documentation has been output as two HTML files named <code>index.html</code> and <code>about/index.html</code>.  We also have various other media that's been copied into the <code>site</code> directory as part of the documentation theme.</p>\n<p>If you're using source code control such as <code>git</code> you probably don't want to check your documentation builds into the repository.  Add a line containing <code>site/</code> to your <code>.gitignore</code> file.</p>\n<pre><code>$ echo \"site/\" &gt;&gt; .gitignore\n</code></pre>\n<p>If you're using another source code control you'll want to check it's documentation on how to ignore specific directories.</p>\n<p>After some time, files may be removed from the documentation but they will still reside in the <code>site</code> directory. To remove those stale files, just run mkdocs with the <code>--clean</code> switch.</p>\n<pre><code>$ mkdocs build --clean\n</code></pre>\n<h2 id=\"deploying\">Deploying</h2>\n<p>The documentation site that we've just built only uses static files so you'll be able to host it from pretty much anywhere. <a href=\"https://help.github.com/articles/creating-project-pages-manually\">GitHub project pages</a> and <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Amazon S3</a> are good hosting options. Upload the contents of the entire <code>site</code> directory to wherever you're hosting your website from and you're done.</p>", 
    "url": "/", 
    "language": "en", 
    "title": "Home"
}