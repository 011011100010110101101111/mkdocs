{
    "content": "<h1 id=\"custom-themes\">Custom themes<a class=\"headerlink\" href=\"#custom-themes\" title=\"Permanent link\">\uf0c1</a></h1>\n<p>A guide to creating and distributing custom themes.</p>\n<hr />\n<p>When creating a new theme, you can either follow the steps in this guide to\ncreate one from scratch or you can download the <code>mkdocs-basic-theme</code> as a\nbasic, yet complete, theme with all the boilerplate required. <strong>You can find\nthis base theme on <a href=\"https://github.com/mkdocs/mkdocs-basic-theme\">GitHub</a></strong>.\nIt contains detailed comments in the code to describe the different features\nand their usage.</p>\n<h2 id=\"creating-a-custom-theme\">Creating a custom theme<a class=\"headerlink\" href=\"#creating-a-custom-theme\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>The bare minimum required for a custom theme is a <code>base.html</code> <a href=\"http://jinja.pocoo.org/docs/dev/\">Jinja2\ntemplate</a> file. This should be placed in a directory which will be the\n<code>theme_dir</code> and it should be created next to the <code>mkdocs.yml</code> configuration\nfile. Within <code>mkdocs.yml</code>, specify the <code>theme_dir</code> option and set it to the\nname of the directory containing <code>base.html</code>. For example, given this example\nproject layout:</p>\n<pre><code>mkdocs.yml\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...\n</code></pre>\n<p>You would include the following setting to use the custom theme directory:</p>\n<pre><code>theme_dir: 'custom_theme'\n</code></pre>\n<p>If used in combination with the <code>theme</code> configuration value a custom theme can\nbe used to replace only specific parts of a built-in theme. For example, with\nthe above layout and if you set <code>theme: mkdocs</code> then the <code>base.html</code> file\nwould replace that in the theme but otherwise it would remain the same. This\nis useful if you want to make small adjustments to an existing theme.</p>\n<h2 id=\"basic-theme\">Basic theme<a class=\"headerlink\" href=\"#basic-theme\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>The simplest <code>base.html</code> file is the following:</p>\n<pre><code class=\"django\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;{% if page_title %}{{ page_title }} - {% endif %}{{ site_name }}&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    {{ content }}\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Article content from each page specified in <code>mkdocs.yml</code> is inserted using the\n<code>{{ content }}</code> tag. Stylesheets and scripts can be brought into this theme as\nwith a normal HTML file. Navbars and tables of contents can also be generated\nand included automatically, through the <code>nav</code> and <code>toc</code> objects, respectively.\nIf you wish to write your own theme, it is recommended to start with one of\nthe <a href=\"https://github.com/mkdocs/mkdocs/tree/master/mkdocs/themes\">built-in themes</a> and modify it accordingly.</p>\n<h2 id=\"template-variables\">Template Variables<a class=\"headerlink\" href=\"#template-variables\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>Each template in a theme is built with a template context. These are the\nvariables that are available to themes. The context varies depending on the\ntemplate that is being built. At the moment templates are either built with\nthe global context or with a page specific context. The global context is used\nfor HTML pages that don't represent an individual Markdown document, for\nexample a 404.html page or search.html.</p>\n<h3 id=\"global-context\">Global Context<a class=\"headerlink\" href=\"#global-context\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>The following variables in the context map directly the <a href=\"../configuration/\">configuration options\n</a>.</p>\n<table>\n<thead>\n<tr>\n<th>Variable Name</th>\n<th>Configuration name</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>site_name</td>\n<td><a href=\"../configuration/#site_name\">site_name</a></td>\n<td></td>\n</tr>\n<tr>\n<td>site_author</td>\n<td><a href=\"../configuration/#site_author\">site_author</a></td>\n<td></td>\n</tr>\n<tr>\n<td>favicon</td>\n<td><a href=\"../configuration/#site_favicon\">site_favicon</a></td>\n<td></td>\n</tr>\n<tr>\n<td>page_description</td>\n<td><a href=\"../configuration/#site_description\">site_description</a></td>\n<td></td>\n</tr>\n<tr>\n<td>repo_url</td>\n<td><a href=\"../configuration/#repo_url\">repo_url</a></td>\n<td></td>\n</tr>\n<tr>\n<td>repo_name</td>\n<td><a href=\"../configuration/#repo_name\">repo_name</a></td>\n<td></td>\n</tr>\n<tr>\n<td>site_url</td>\n<td><a href=\"../configuration/#site_url\">site_url</a></td>\n<td></td>\n</tr>\n<tr>\n<td>extra_css</td>\n<td><a href=\"../configuration/#extra_css\">extra_css</a></td>\n<td></td>\n</tr>\n<tr>\n<td>extra_javascript</td>\n<td><a href=\"../configuration/#extra_javascript\">extra_javascript</a></td>\n<td></td>\n</tr>\n<tr>\n<td>extra</td>\n<td><a href=\"../configuration/#extra\">extra</a></td>\n<td></td>\n</tr>\n<tr>\n<td>include_nav</td>\n<td><a href=\"../configuration/#include_nav\">include_nav</a></td>\n<td></td>\n</tr>\n<tr>\n<td>include_next_prev</td>\n<td><a href=\"../configuration/#include_next_prev\">include_next_prev</a></td>\n<td></td>\n</tr>\n<tr>\n<td>copyright</td>\n<td><a href=\"../configuration/#copyright\">copyright</a></td>\n<td></td>\n</tr>\n<tr>\n<td>google_analytics</td>\n<td><a href=\"../configuration/#google_analytics\">google_analytics</a></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>The following variables provide information about the navigation and location.</p>\n<h4 id=\"nav\">nav<a class=\"headerlink\" href=\"#nav\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>The <code>nav</code> variable is used to create the navigation for the documentation.\nFollowing is a basic usage example which outputs the first and second level\nnavigation as a nested list.</p>\n<pre><code class=\"django\">&lt;ul&gt;\n  {% for nav_item in nav %}\n      {% if nav_item.children %}\n          &lt;li&gt;{{ nav_item.title }}\n              &lt;ul&gt;\n              {% for nav_item in nav_item.children %}\n                  &lt;li class=&quot;{% if nav_item.active%}current{%endif%}&quot;&gt;\n                      &lt;a href=&quot;{{ nav_item.url }}&quot;&gt;{{ nav_item.title }}&lt;/a&gt;\n                  &lt;/li&gt;\n              {% endfor %}\n              &lt;/ul&gt;\n          &lt;/li&gt;\n      {% else %}\n          &lt;li class=&quot;{% if nav_item.active%}current{%endif%}&quot;&gt;\n              &lt;a href=&quot;{{ nav_item.url }}&quot;&gt;{{ nav_item.title }}&lt;/a&gt;\n          &lt;/li&gt;\n      {% endif %}\n\n  {% endfor %}\n&lt;/ul&gt;\n</code></pre>\n\n<h4 id=\"base_url\">base_url<a class=\"headerlink\" href=\"#base_url\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>The <code>base_url</code> provides a relative path to the root of the MkDocs project.\nThis makes it easy to include links to static assets in your theme. For\nexample, if your theme includes a <code>js</code> folder, to include <code>theme.js</code> from that\nfolder on all pages you would do this:</p>\n<pre><code class=\"django\">&lt;script src=&quot;{{ base_url }}/js/theme.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n\n<h4 id=\"homepage_url\">homepage_url<a class=\"headerlink\" href=\"#homepage_url\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>Provides a relative path to the documentation homepage.</p>\n<h4 id=\"mkdocs_version\">mkdocs_version<a class=\"headerlink\" href=\"#mkdocs_version\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>Contains the current MkDocs version.</p>\n<h4 id=\"build_date_utc\">build_date_utc<a class=\"headerlink\" href=\"#build_date_utc\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>A Python datetime object that represents the date and time the documentation\nwas built in UTC. This is useful for showing how recently the documentation\nwas updated.</p>\n<h3 id=\"page-context\">Page Context<a class=\"headerlink\" href=\"#page-context\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>The page context includes all of the above Global context and the following\nadditional variables.</p>\n<h4 id=\"page_title\">page_title<a class=\"headerlink\" href=\"#page_title\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>Contains the Title for the current page.</p>\n<h4 id=\"page_description\">page_description<a class=\"headerlink\" href=\"#page_description\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>Contains the description for the current page on the homepage, it is blank on\nother pages.</p>\n<h4 id=\"content\">content<a class=\"headerlink\" href=\"#content\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>The rendered Markdown as HTML, this is the contents of the documentation.</p>\n<h4 id=\"toc\">toc<a class=\"headerlink\" href=\"#toc\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>An object representing the Table of contents for a page. Displaying the table\nof contents as a simple list can be achieved like this.</p>\n<pre><code class=\"django\">&lt;ul&gt;\n{% for toc_item in toc %}\n    &lt;li&gt;&lt;a href=&quot;{{ toc_item.url }}&quot;&gt;{{ toc_item.title }}&lt;/a&gt;&lt;/li&gt;\n    {% for toc_item in toc_item.children %}\n        &lt;li&gt;&lt;a href=&quot;{{ toc_item.url }}&quot;&gt;{{ toc_item.title }}&lt;/a&gt;&lt;/li&gt;\n    {% endfor %}\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n\n<h4 id=\"meta\">meta<a class=\"headerlink\" href=\"#meta\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>A mapping of the metadata included at the top of the markdown page. In this\nexample we define a <code>source</code> property above the page title.</p>\n<pre><code class=\"no-highlight\">source: generics.py\n        mixins.py\n\n# Page title\n\nContent...\n</code></pre>\n\n<p>A template can access this metadata for the page with the <code>meta.source</code>\nvariable. This could then be used to link to source files related to the\ndocumentation page.</p>\n<pre><code class=\"django\">{% for filename in meta.source %}\n  &lt;a class=&quot;github&quot; href=&quot;https://github.com/.../{{ filename }}&quot;&gt;\n    &lt;span class=&quot;label label-info&quot;&gt;{{ filename }}&lt;/span&gt;\n  &lt;/a&gt;\n{% endfor %}\n</code></pre>\n\n<h4 id=\"canonical_url\">canonical_url<a class=\"headerlink\" href=\"#canonical_url\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>The full, canonical URL to the current page. This includes the site_url from\nthe configuration.</p>\n<h4 id=\"current_page\">current_page<a class=\"headerlink\" href=\"#current_page\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>The page object for the current page. The page path and url properties can be\ndisplayed like this.</p>\n<pre><code class=\"django\">&lt;h1&gt;{{ current_page.title }}&lt;/h1&gt;\n&lt;p&gt; This page is at {{ current_page.url }}&lt;/p&gt;\n</code></pre>\n\n<h4 id=\"previous_page\">previous_page<a class=\"headerlink\" href=\"#previous_page\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>The page object for the previous  page. The usage is the same as for\n<code>current_page</code>.</p>\n<h4 id=\"next_page\">next_page<a class=\"headerlink\" href=\"#next_page\" title=\"Permanent link\">\uf0c1</a></h4>\n<p>The page object for the next page.The usage is the same as for <code>current_page</code>.</p>\n<h3 id=\"extra-context\">Extra Context<a class=\"headerlink\" href=\"#extra-context\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>Additional variables can be passed to the template with the\n<a href=\"../configuration/#extra\"><code>extra</code></a> configuration option. This is a\nset of key value pairs that can make custom templates far more flexible.</p>\n<p>For example, this could be used to include the project version of all pages\nand a list of links related to the project. This can be achieved with the\nfollowing <code>extra</code> configuration:</p>\n<pre><code class=\"yaml\">extra:\n    version: 0.13.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/\n</code></pre>\n\n<p>And then displayed with this HTML in the custom theme.</p>\n<pre><code class=\"django\">{{ config.extra.version }}\n\n{% if config.extra.links %}\n  &lt;ul&gt;\n  {% for link in config.extra.links %}\n      &lt;li&gt;{{ link }}&lt;/li&gt;\n  {% endfor %}\n  &lt;/ul&gt;\n{% endif %}\n</code></pre>\n\n<h2 id=\"search-and-themes\">Search and themes<a class=\"headerlink\" href=\"#search-and-themes\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>As of MkDocs <code>0.13</code> client side search support has been added to MkDocs with\n<a href=\"http://lunrjs.com/\">Lunr.js</a>.</p>\n<p>Search can either be added to every page in the theme or to a dedicated\ntemplate which must be named <code>search.html</code>. The search template will be build\nwith the same name and can be viewable with <code>mkdocs serve</code> at\n<code>http://localhost:8000/search.html</code>. An example of the two different\napproaches can be seen by comparing the <code>mkdocs</code> and <code>readthedocs</code> themes.</p>\n<p>The following HTML needs to be added to the theme so the JavaScript is loaded\nfor Lunr.js.</p>\n<pre><code class=\"django\">&lt;script&gt;var base_url = '{{ base_url }}';&lt;/script&gt;\n&lt;script data-main=&quot;{{ base_url }}/mkdocs/js/search.js&quot; src=&quot;{{ base_url }}/mkdocs/js/require.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The above JavaScript will download the search index, for larger\ndocumentation projects this can be a heavy operation. In those cases, it\nis suggested that you either use the <code>search.html</code> approach to only\ninclude search on one page or load the JavaScript on an event like a form\nsubmit.</p>\n</div>\n<p>This loads the JavaScript and sets a global variable <code>base_url</code> which allows\nthe JavaScript to make the links relative to the current page. The above\nJavaScript, with the following HTML in a <code>search.html</code> template will add a\nfull search implementation to your theme.</p>\n<pre><code class=\"django\">&lt;h1 id=&quot;search&quot;&gt;Search Results&lt;/h1&gt;\n\n&lt;form action=&quot;search.html&quot;&gt;\n  &lt;input name=&quot;q&quot; id=&quot;mkdocs-search-query&quot; type=&quot;text&quot; &gt;\n&lt;/form&gt;\n\n&lt;div id=&quot;mkdocs-search-results&quot;&gt;\n  Sorry, page not found.\n&lt;/div&gt;\n</code></pre>\n\n<p>This works by looking for the specific ID's used in the above HTML. The input\nfor the user to type the search query must have the ID <code>mkdocs-search-query</code>\nand <code>mkdocs-search-results</code> is the directory where the results will be placed.</p>\n<h2 id=\"packaging-themes\">Packaging Themes<a class=\"headerlink\" href=\"#packaging-themes\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>MkDocs makes use of <a href=\"https://packaging.python.org/en/latest/\">Python packaging</a> to distribute themes. This comes with a\nfew requirements.</p>\n<p>To see an example of a package containing one theme, see the <a href=\"http://mkdocs.github.io/mkdocs-bootstrap/\">MkDocs Bootstrap\ntheme</a> and to see a package that contains many themes, see the <a href=\"http://mkdocs.github.io/mkdocs-bootswatch/\">MkDocs\nBootswatch theme</a>.</p>\n<h3 id=\"package-layout\">Package Layout<a class=\"headerlink\" href=\"#package-layout\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>The following layout is recommended for themes. Two files at the top level\ndirectory called <code>MANIFEST.in</code> amd <code>setup.py</code>. Then a directory with the name\nof your theme and containing a <code>base.html</code> file and a <code>__init__.py</code>.</p>\n<pre><code class=\"no-highlight\">.\n|-- MANIFEST.in\n|-- theme_name\n|   |-- base.html\n|   |-- __init__.py\n`-- setup.py\n</code></pre>\n\n<p>The <code>MANIFEST.in</code> file should contain the following contents but with\ntheme_name updated and any extra file extensions added to the include.</p>\n<pre><code class=\"no-highlight\">recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\n</code></pre>\n\n<p>The <code>setup.py</code> should include the following text with the modifications\ndescribed below.</p>\n<pre><code class=\"python\">from setuptools import setup, find_packages\n\nVERSION = '0.0.1'\n\n\nsetup(\n    name=&quot;mkdocs-themename&quot;,\n    version=VERSION,\n    url='',\n    license='',\n    description='',\n    author='',\n    author_email='',\n    packages=find_packages(),\n    include_package_data=True,\n    entry_points={\n        'mkdocs.themes': [\n            'themename = theme_name',\n        ]\n    },\n    zip_safe=False\n)\n</code></pre>\n\n<p>Fill in the URL, license, description, author and author email address.</p>\n<p>The name should follow the convention <code>mkdocs-themename</code> (like <code>mkdocs-\nbootstrap</code> and <code>mkdocs-bootswatch</code>), starting with MkDocs, using hyphens to\nseparate words and including the name of your theme.</p>\n<p>Most of the rest of the file can be left unedited. The last section we need to\nchange is the entry_points. This is how MkDocs finds the theme(s) you are\nincluding in the package. The name on the left is the one that users will use\nin their mkdocs.yml and the one on the right is the directory containing your\ntheme files.</p>\n<p>The directory you created at the start of this section with the base.html file\nshould contain all of the other theme files. The minimum requirement is that\nit includes a <code>base.html</code> for the theme. It <strong>must</strong> also include a\n<code>__init__.py</code> file which should be empty, this file tells Python that the\ndirectory is a package.</p>\n<h3 id=\"distributing-themes\">Distributing Themes<a class=\"headerlink\" href=\"#distributing-themes\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>With the above changes, your theme should now be ready to install. This can be\ndone with pip, using <code>pip install .</code> if you are still in the same directory as\nthe setup.py.</p>\n<p>Most Python packages, including MkDocs, are distributed on PyPI. To do this,\nyou should run the following command.</p>\n<pre><code class=\"no-highlight\">python setup.py register\n</code></pre>\n\n<p>If you don't have an account setup, you should be prompted to create one.</p>\n<p>For a much more detailed guide, see the official Python packaging\ndocumentation for <a href=\"https://packaging.python.org/en/latest/distributing.html\">Packaging and Distributing Projects</a>.</p>", 
    "url": "/user-guide/custom-themes/", 
    "language": "en", 
    "title": "Custom Themes"
}