{
    "content": "<h1 id=\"writing-your-docs\">Writing your docs<a class=\"headerlink\" href=\"#writing-your-docs\" title=\"Permanent link\">\uf0c1</a></h1>\n<p>How to write and layout your markdown source files.</p>\n<hr />\n<h2 id=\"configure-pages-and-navigation\">Configure Pages and Navigation<a class=\"headerlink\" href=\"#configure-pages-and-navigation\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>The <a href=\"../configuration/#pages\">pages configuration</a> in your\n<code>mkdocs.yml</code> defines which pages are built by MkDocs and how they appear in the\ndocumentation navigation. If not provided, the pages configuration will be\nautomatically created by discovering all the Markdown files in the\n<a href=\"../configuration/#docs_dir\">documentation directory</a>.</p>\n<p>A simple pages configuration looks like this:</p>\n<pre><code class=\"no-highlight\">pages:\n- 'index.md'\n- 'about.md'\n</code></pre>\n\n<p>With this example we will build two pages at the top level and they will\nautomatically have their titles inferred from the filename. Assuming <code>docs_dir</code>\nhas the default value, <code>docs</code>, the source files for this documentation would be\n<code>docs/index.md</code> and <code>docs/about.md</code>. To provide a custom name for these pages,\nthey can be added before the filename.</p>\n<pre><code class=\"no-highlight\">pages:\n- Home: 'index.md'\n- About: 'about.md'\n</code></pre>\n\n<h3 id=\"multilevel-documentation\">Multilevel documentation<a class=\"headerlink\" href=\"#multilevel-documentation\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>Subsections can be created by listing related pages together under a section\ntitle. For example:</p>\n<pre><code class=\"no-highlight\">pages:\n- Home: 'index.md'\n- User Guide:\n    - 'Writing your docs': 'user-guide/writing-your-docs.md'\n    - 'Styling your docs': 'user-guide/styling-your-docs.md'\n- About:\n    - 'License': 'about/license.md'\n    - 'Release Notes': 'about/release-notes.md'\n</code></pre>\n\n<p>With the above configuration we have three top level sections: Home, User Guide\nand About. Then under User Guide we have two pages, Writing your docs and\nStyling your docs. Under the About section we also have two pages, License and\nRelease Notes.</p>\n<h2 id=\"file-layout\">File layout<a class=\"headerlink\" href=\"#file-layout\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>Your documentation source should be written as regular Markdown files, and\nplaced in a directory somewhere in your project. Normally this directory will be\nnamed <code>docs</code> and will exist at the top level of your project, alongside the\n<code>mkdocs.yml</code> configuration file.</p>\n<p>The simplest project you can create will look something like this:</p>\n<pre><code class=\"no-highlight\">mkdocs.yml\ndocs/\n    index.md\n</code></pre>\n\n<p>By convention your project homepage should always be named <code>index</code>. Any of the\nfollowing extensions may be used for your Markdown source files: <code>markdown</code>,\n<code>mdown</code>, <code>mkdn</code>, <code>mkd</code>, <code>md</code>.</p>\n<p>You can also create multi-page documentation, by creating several markdown\nfiles:</p>\n<pre><code class=\"no-highlight\">mkdocs.yml\ndocs/\n    index.md\n    about.md\n    license.md\n</code></pre>\n\n<p>The file layout you use determines the URLs that are used for the generated\npages. Given the above layout, pages would be generated for the following URLs:</p>\n<pre><code class=\"no-highlight\">/\n/about/\n/license/\n</code></pre>\n\n<p>You can also include your Markdown files in nested directories if that better\nsuits your documentation layout.</p>\n<pre><code class=\"no-highlight\">docs/\n    index.md\n    user-guide/getting-started.md\n    user-guide/configuration-options.md\n    license.md\n</code></pre>\n\n<p>Source files inside nested directories will cause pages to be generated with\nnested URLs, like so:</p>\n<pre><code class=\"no-highlight\">/\n/user-guide/getting-started/\n/user-guide/configuration-options/\n/license/\n</code></pre>\n\n<h2 id=\"linking-documents\">Linking documents<a class=\"headerlink\" href=\"#linking-documents\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>MkDocs allows you to interlink your documentation by using regular Markdown\nhyperlinks.</p>\n<h3 id=\"internal-hyperlinks\">Internal hyperlinks<a class=\"headerlink\" href=\"#internal-hyperlinks\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>When linking between pages in the documentation you can simply use the regular\nMarkdown hyperlinking syntax, including the relative path to the Markdown\ndocument you wish to link to.</p>\n<pre><code>Please see the [project license](license.md) for further details.\n</code></pre>\n<p>When the MkDocs build runs, these hyperlinks will automatically be transformed\ninto a hyperlink to the appropriate HTML page.</p>\n<p>When working on your documentation you should be able to open the linked\nMarkdown document in a new editor window simply by clicking on the link.</p>\n<p>If the target documentation file is in another directory you'll need to make\nsure to include any relative directory path in the hyperlink.</p>\n<pre><code>Please see the [project license](../about/license.md) for further details.\n</code></pre>\n<p>You can also link to a section within a target documentation page by using an\nanchor link. The generated HTML will correctly transform the path portion of the\nhyperlink, and leave the anchor portion intact.</p>\n<pre><code>Please see the [project license](about.md#license) for further details.\n</code></pre>\n<h2 id=\"images-and-media\">Images and media<a class=\"headerlink\" href=\"#images-and-media\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>As well as the Markdown source files, you can also include other file types in\nyour documentation, which will be copied across when generating your\ndocumentation site. These might include images and other media.</p>\n<p>For example, if your project documentation needed to include a <a href=\"https://help.github.com/articles/setting-up-a-custom-domain-with-pages#setting-the-domain-in-your-repo\">GitHub pages\nCNAME\nfile</a>\nand a PNG formatted screenshot image then your file layout might look as\nfollows:</p>\n<pre><code class=\"no-highlight\">mkdocs.yml\ndocs/\n    CNAME\n    index.md\n    about.md\n    license.md\n    img/\n        screenshot.png\n</code></pre>\n\n<p>To include images in your documentation source files, simply use any of the\nregular Markdown image syntaxes:</p>\n<pre><code class=\"Markdown\">Cupcake indexer is a snazzy new project for indexing small cakes.\n\n![Screenshot](img/screenshot.png)\n\n*Above: Cupcake indexer in progress*\n</code></pre>\n\n<p>You image will now be embedded when you build the documentation, and should also\nbe previewed if you're working on the documentation with a Markdown editor.</p>\n<h2 id=\"markdown-extensions\">Markdown extensions<a class=\"headerlink\" href=\"#markdown-extensions\" title=\"Permanent link\">\uf0c1</a></h2>\n<p>MkDocs supports the following Markdown extensions.</p>\n<h3 id=\"tables\">Tables<a class=\"headerlink\" href=\"#tables\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>A simple table looks like this:</p>\n<pre><code class=\"no-highlight\">First Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n</code></pre>\n\n<p>If you wish, you can add a leading and tailing pipe to each line of the table:</p>\n<pre><code class=\"no-highlight\">| First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |\n</code></pre>\n\n<p>Specify alignment for each column by adding colons to separator lines:</p>\n<pre><code class=\"no-highlight\">First Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n</code></pre>\n\n<h3 id=\"fenced-code-blocks\">Fenced code blocks<a class=\"headerlink\" href=\"#fenced-code-blocks\" title=\"Permanent link\">\uf0c1</a></h3>\n<p>The first line should contain 3 or more backtick (<code>`</code>) characters, and the\nlast line should contain the same number of backtick characters (<code>`</code>):</p>\n<pre><code class=\"no-highlight\">```\nFenced code blocks are like Stardard\nMarkdown\u2019s regular code blocks, except that\nthey\u2019re not indented and instead rely on\nstart and end fence lines to delimit the\ncode block.\n```\n</code></pre>\n\n<p>With this approach, the language can optionally be specified on the first line\nafter the backticks:</p>\n<pre><code class=\"no-highlight\">```python\ndef fn():\n    pass\n```\n</code></pre>", 
    "url": "/user-guide/writing-your-docs/", 
    "language": "en", 
    "title": "Writing Your Docs"
}